// this file was autogenerated by @jersey/openapi
/** 
 * @module 
 * this provides types for the Guilded websocket
 */

export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        _SocketEventEnvelope: {
            /**
             * Data
             * @description Data of any form depending on the underlying event
             */
            d?: Record<string, unknown>;
            /**
             * Opcode
             * @description An operation code corresponding to the nature of the sent message (for example, success, failure, etc.)
             * @enum {integer}
             */
            op: 0 | 1 | 2 | 8 | 9;
            /**
             * Message ID
             * @description Message ID used for replaying events after a disconnect
             */
            s?: string;
            /**
             * Event name
             * @description Event name for the given message
             */
            t?: string;
        };
        /** @example {
         *   "id": "9RVMoDZy",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "title": "Pizza Party, don't be tardy!",
         *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
         * } */
        Announcement: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the announcement
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this announcement
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the announcement
             */
            title: string;
        };
        /** @example {
         *   "id": 123456,
         *   "content": "Now THAT is one awesome announcement!!!",
         *   "createdAt": "2023-04-07T16:19:00.000Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "announcementId": "9RVMoDZy",
         *   "createdBy": "Ann6LewA"
         * } */
        AnnouncementComment: {
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the announcement comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this announcement comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Announcement comment ID
             * @description The ID of the announcement comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy",
         *   "announcementCommentId": 123456
         * } */
        AnnouncementCommentReaction: {
            /**
             * Announcement comment ID
             * @description The ID of the announcement comment
             */
            announcementCommentId: number;
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy"
         * } */
        AnnouncementReaction: {
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "id": 1,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "Surprise LAN party for my wife ðŸ¤«",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "duration": 60,
         *   "color": 6118369,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        CalendarEvent: {
            /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
            autofillWaitlist?: boolean;
            cancellation?: {
                /**
                 * Created by
                 * @description The ID of the user who created this event cancellation
                 */
                createdBy: string;
                /**
                 * Description
                 * Format: long-form markdown
                 * @description The description of event cancellation
                 */
                description?: string;
            };
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /** @description The integer value corresponds to the decimal RGB representation for the color. The color of the event when viewing in the calendar */
            color?: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this event
             */
            createdBy: string;
            /**
             * Description
             * Format: long-form markdown
             * @description The description of the event
             */
            description?: string;
            /**
             * Duration
             * @description The duration of the event _**in minutes**_
             */
            duration?: number;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            id: number;
            /**
             * Is all day
             * @description Does the event last all day
             */
            isAllDay?: boolean;
            /** Is private */
            isPrivate?: boolean;
            /**
             * Location
             * @description The location of the event
             */
            location?: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Name
             * @description The name of the event
             */
            name: string;
            /** @description Is this event a repeating event */
            repeats?: boolean;
            /**
             * Role IDs
             * @description The role IDs to restrict the event to
             */
            roleIds?: number[];
            /**
             * RSVP disabled
             * @description When disabled, users will not be able to RSVP to the event
             */
            rsvpDisabled?: boolean;
            /** @description The number of RSVPs to allow before waitlisting RSVPs */
            rsvpLimit?: number;
            /**
             * Calendar event series ID
             * Format: uuid
             * @description The ID of the calendar event series. Only shows if the event is repeating
             */
            seriesId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Starts at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event starts at
             */
            startsAt: string;
            /**
             * Format: uri
             * @description A URL to associate with the event
             */
            url?: string;
        };
        /** @example {
         *   "id": 1234567890,
         *   "content": "I will be there!!",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2022-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "calendarEventId": 987654321
         * } */
        CalendarEventComment: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the calendar event comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the calendar event comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this calendar event comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Calendar event comment ID
             * @description The ID of the calendar event comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the calendar event comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1,
         *   "calendarEventCommentId": 1234567890
         * } */
        CalendarEventCommentReaction: {
            /**
             * Calendar event comment ID
             * @description The ID of the calendar event comment
             */
            calendarEventCommentId: number;
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1
         * } */
        CalendarEventReaction: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "calendarEventId": 1,
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "userId": "Ann6LewA",
         *   "status": "going",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        CalendarEventRsvp: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the RSVP was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this RSVP
             */
            createdBy: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Status
             * @description The status of the RSVP
             * @enum {string}
             */
            status: "going" | "maybe" | "declined" | "invited" | "waitlisted" | "not responded";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the RSVP was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this RSVP
             */
            updatedBy?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        CalendarEventSeries: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Calendar event series ID
             * Format: uuid
             * @description The ID of the calendar event series
             */
            id: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
        };
        /** @example {
         *   "id": 1337,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "name": "Social",
         *   "createdAt": "2023-07-07T20:15:00.706Z",
         *   "updatedAt": "2023-07-08T20:15:00.706Z"
         * } */
        Category: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the category was created at
             */
            createdAt: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the category */
            id: number;
            /** @description Name of the category */
            name: string;
            /**
             * Priority
             * @description The priority of the category will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in descending order. Due to legacy issues, sending a null value is not possible
             */
            priority?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the category was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "roleId": 591232,
         *   "categoryId": 1337
         * } */
        ChannelCategoryRolePermission: {
            /** @description The ID of the category */
            categoryId: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId: number;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "userId": "Ann6LewA",
         *   "categoryId": 1337
         * } */
        ChannelCategoryUserPermission: {
            /** @description The ID of the category */
            categoryId: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "roleId": 591232,
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChannelRolePermission: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId: number;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "userId": "Ann6LewA",
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChannelUserPermission: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /**
         * @description Rich content sections optionally associated with chat messages. Properties with "webhook-markdown" support allow for the following: link, italic, bold, strikethrough, underline, inline code, block code, reaction, mention, and role mention.
         * @example {
         *   "title": "embed title",
         *   "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *   "url": "https://www.guilded.gg",
         *   "color": 6118369,
         *   "timestamp": "2022-04-12T22:14:36.737Z",
         *   "footer": {
         *     "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *     "text": "footer text"
         *   },
         *   "thumbnail": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *   },
         *   "image": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *   },
         *   "author": {
         *     "name": "Gil",
         *     "url": "https://www.guilded.gg",
         *     "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *   },
         *   "fields": [
         *     {
         *       "name": "hello",
         *       "value": "these are fields"
         *     },
         *     {
         *       "name": "~~help i have been crossed out~~",
         *       "value": "~~oh noes~~",
         *       "inline": true
         *     },
         *     {
         *       "name": "another inline",
         *       "value": "field",
         *       "inline": true
         *     }
         *   ]
         * }
         */
        ChatEmbed: {
            /** @description A small section above the title of the embed */
            author?: {
                /**
                 * Format: media-uri
                 * @description URL of a small image to display to the left of the author's `name`
                 */
                icon_url?: string;
                /** @description Name of the author */
                name?: string;
                /**
                 * Format: uri
                 * @description URL to linkify the author's `name` field
                 */
                url?: string;
            };
            /** @description The integer value corresponds to the decimal RGB representation for the color. The color that the left border should be */
            color?: number;
            /**
             * Format: webhook-markdown
             * @description Subtext of the embed
             */
            description?: string;
            /** @description Table-like cells to add to the embed */
            fields?: {
                /**
                 * @description If the field should wrap or not
                 * @default false
                 */
                inline: boolean;
                /**
                 * Format: webhook-markdown
                 * @description Header of the table-like cell
                 */
                name: string;
                /**
                 * Format: webhook-markdown
                 * @description Subtext of the table-like cell
                 */
                value: string;
            }[];
            /** @description A small section at the bottom of the embed */
            footer?: {
                /**
                 * Format: media-uri
                 * @description URL of a small image to put in the footer
                 */
                icon_url?: string;
                /** @description Text of the footer */
                text: string;
            };
            /** @description The main picture to associate with the embed */
            image?: {
                /**
                 * Format: media-uri
                 * @description URL of the image
                 */
                url?: string;
            };
            /** @description An image to the right of the embed's content */
            thumbnail?: {
                /**
                 * Format: media-uri
                 * @description URL of the image
                 */
                url?: string;
            };
            /**
             * Format: date-time
             * @description A timestamp to put in the footer
             */
            timestamp?: string;
            /**
             * Format: webhook-markdown
             * @description Main header of the embed
             */
            title?: string;
            /**
             * Format: uri
             * @description URL to linkify the `title` field with
             */
            url?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "default",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "content": "Hello **world**!",
         *   "embeds": [
         *     {
         *       "title": "embed title",
         *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *       "url": "https://www.guilded.gg",
         *       "color": 6118369,
         *       "timestamp": "2022-04-12T22:14:36.737Z",
         *       "footer": {
         *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *         "text": "footer text"
         *       },
         *       "thumbnail": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *       },
         *       "image": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *       },
         *       "author": {
         *         "name": "Gil",
         *         "url": "https://www.guilded.gg",
         *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *       },
         *       "fields": [
         *         {
         *           "name": "hello",
         *           "value": "these are fields"
         *         },
         *         {
         *           "name": "~~help i have been crossed out~~",
         *           "value": "~~oh noes~~",
         *           "inline": true
         *         },
         *         {
         *           "name": "another inline",
         *           "value": "field",
         *           "inline": true
         *         }
         *       ]
         *     }
         *   ],
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ChatMessage: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: chat markdown
             * @description The content of the message
             */
            content?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the message was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this message, if it was created by a webhook
             */
            createdByWebhookId?: string;
            embeds?: components["schemas"]["ChatEmbed"][];
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId?: string;
            /**
             * Hidden content link preview URLs
             * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
             */
            hiddenLinkPreviewUrls?: string[];
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message
             */
            id: string;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            /**
             * Is private
             * @description If set, this message will only be seen by those mentioned or replied to
             */
            isPrivate?: boolean;
            /**
             * Is silent
             * @description If set, this message did not notify mention or reply recipients
             * @default false
             */
            isSilent: boolean;
            mentions?: components["schemas"]["Mentions"];
            /** @description Message IDs that were replied to */
            replyMessageIds?: string[];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId?: string;
            /**
             * Type
             * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
             * @enum {string}
             */
            type: "default" | "system";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the message was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "messageId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChatMessageReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message
             */
            messageId: string;
        };
        /** @example {
         *   "id": 0,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
         *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto.",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "updatedAt": "2021-07-15T22:20:00.706Z",
         *   "updatedBy": "Ann6LewA"
         * } */
        Doc: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the doc
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this doc
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the doc
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this doc
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": 123456,
         *   "content": "Wow, cool document!!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "docId": 0,
         *   "createdBy": "Ann6LewA"
         * } */
        DocComment: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the doc comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this doc comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            /**
             * Doc comment ID
             * @description The ID of the doc comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0,
         *   "docCommentId": 123456
         * } */
        DocCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            /**
             * Doc comment ID
             * @description The ID of the doc comment
             */
            docCommentId: number;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0
         * } */
        DocReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "id": 90000000,
         *   "name": "grinning",
         *   "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         * } */
        Emote: {
            /**
             * Emote ID
             * @description The ID of the emote
             */
            id: number;
            /**
             * Name
             * @description The name of the emote
             */
            name: string;
            /**
             * Server ID
             * @description The ID of the server the emote was created on
             */
            serverId?: string;
            /**
             * Emote URL
             * Format: media-uri
             * @description The URL of the emote image
             */
            url: string;
        };
        /** @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "content": "Please introduce yourself in this topic!!!"
         * } */
        ForumTopic: {
            /**
             * Bumped at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the forum topic
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Is locked
             * @default false
             */
            isLocked: boolean;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 1234567890,
         *   "content": "Great idea!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "forumTopicId": 2036274747,
         *   "createdBy": "Ann6LewA"
         * } */
        ForumTopicComment: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the forum topic comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /** @description The ID of the forum topic */
            forumTopicId: number;
            /** @description The ID of the forum topic comment */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456,
         *   "forumTopicCommentId": 1234567890
         * } */
        ForumTopicCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic comment */
            forumTopicCommentId: number;
            /** @description The ID of the forum topic */
            forumTopicId: number;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456
         * } */
        ForumTopicReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic */
            forumTopicId: number;
        };
        /** @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ForumTopicSummary: {
            /**
             * Bumped at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Is locked
             * @default false
             */
            isLocked: boolean;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": "ZVzBo83p",
         *   "serverId": "wlVr3Ggl",
         *   "name": "Fans of Turnip Boy Commits Tax Evasion",
         *   "description": "Best game on steam!",
         *   "isPublic": true,
         *   "createdAt": "2021-06-15T00:04:20.696Z",
         *   "createdBy": "Ann6LewA"
         * } */
        Group: {
            /**
             * Archived at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was archived at, if relevant
             */
            archivedAt?: string;
            /**
             * Archived by
             * @description The ID of the user who archived this group
             */
            archivedBy?: string;
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the group
             */
            avatar?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this group
             */
            createdBy: string;
            /**
             * Description
             * @description The description associated with the group
             */
            description?: string;
            /** @description The emote to associate with the group */
            emoteId?: number;
            /**
             * Group ID
             * @description The ID of the group
             */
            id: string;
            /**
             * Is home
             * @description If `true`, this is the server's home group
             */
            isHome?: boolean;
            /**
             * Is public
             * @description Is this group open for anyone to join?
             * @default false
             */
            isPublic: boolean;
            /** @description The name of the group */
            name: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this group
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA",
         *     "content": "Duly noted"
         *   }
         * } */
        ListItem: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Completed at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Format: uuid
             * @description The ID of the list item
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Message
             * Format: list item markdown
             * @description The message of the list item
             */
            message: string;
            note?: {
                /**
                 * Note
                 * Format: long-form markdown
                 * @description The note of the list item
                 */
                content: string;
                /**
                 * Created at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                mentions?: components["schemas"]["Mentions"];
                /**
                 * Updated at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
            };
            /**
             * Format: uuid
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA"
         *   }
         * } */
        ListItemSummary: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Completed at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Format: uuid
             * @description The ID of the list item
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Message
             * Format: list item markdown
             * @description The message of the list item
             */
            message: string;
            note?: {
                /**
                 * Created at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                /**
                 * Updated at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
            };
            /**
             * Format: uuid
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
        };
        /**
         * @description Metadata of who or what is mentioned in content
         * @example {
         *   "users": [
         *     {
         *       "id": "Ann6LewA"
         *     }
         *   ],
         *   "channels": [
         *     {
         *       "id": "00000000-0000-0000-0000-000000000000"
         *     }
         *   ],
         *   "roles": [
         *     {
         *       "id": 591232
         *     }
         *   ],
         *   "everyone": true,
         *   "here": true
         * }
         */
        Mentions: {
            /**
             * Channels
             * @description Info on mentioned channels
             */
            channels?: {
                /**
                 * Channel ID
                 * Format: uuid
                 * @description The ID of the channel
                 */
                id: string;
            }[];
            /**
             * Everyone
             * @description If @everyone was mentioned
             */
            everyone?: boolean;
            /**
             * Here
             * @description If @here was mentioned
             */
            here?: boolean;
            /**
             * Roles
             * @description Info on mentioned roles
             */
            roles?: {
                /**
                 * Role ID
                 * @description The ID of the role
                 */
                id: number;
            }[];
            /**
             * Users
             * @description Info on mentioned users
             */
            users?: {
                /**
                 * User ID
                 * Format: user-id
                 * @description The ID of the user
                 */
                id: string;
            }[];
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-04-15T20:15:00.706Z",
         *   "updatedAt": "2023-04-16T20:15:00.706Z",
         *   "name": "Captain",
         *   "isSelfAssignable": true,
         *   "permissions": [
         *     "CanUpdateServer",
         *     "CanReadChats",
         *     "CanCreateChats"
         *   ],
         *   "colors": [
         *     6118369
         *   ]
         * } */
        Role: {
            /**
             * Bot user ID
             * Format: user-id
             * @description The bot user ID this role has been defined for. Roles with this populated can only be deleted by kicking the bot
             */
            botUserId?: string;
            /** @description An array of integer values corresponding to the decimal RGB representation for a color. The first color is solid, and a second color indicates a gradient */
            colors?: number[];
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the role was created at
             */
            createdAt: string;
            /**
             * Role icon URL
             * Format: media-uri
             * @description The URL of the role icon
             */
            icon?: string;
            /**
             * Role ID
             * @description The ID of the role
             */
            id: number;
            /**
             * Is Base
             * @description The default role users are given when joining the server. Base roles are tied directly to the server and cannot be created or deleted
             * @default false
             */
            isBase: boolean;
            /**
             * Display Separately
             * @description If set, the role will be displayed separately in the channel member list
             * @default false
             */
            isDisplayedSeparately: boolean;
            /**
             * Mentionable
             * @description If set, this role can be mentioned
             * @default false
             */
            isMentionable: boolean;
            /**
             * Self Assignable
             * @description If set, this roll will be self assigned
             * @default false
             */
            isSelfAssignable: boolean;
            /**
             * Role name
             * @description The role's name
             */
            name: string;
            /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
            permissions: string[];
            /**
             * Priority
             * @description The priority the role will be in relation to other roles in the server. The higher the value, the more precedence the role has over lower priority roles, and the higher up it will be displayed in the UI. Values can be zero or negative!
             */
            priority?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the role was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": "wlVr3Ggl",
         *   "type": "community",
         *   "name": "Guilded",
         *   "url": "Guilded-Official",
         *   "about": "The Official Guilded Server! For devs, friends, and fans alike!",
         *   "ownerId": "Ann6LewA",
         *   "createdAt": "2018-10-05T20:15:00.706Z",
         *   "isVerified": true,
         *   "timezone": "America/Los Angeles (PST/PDT)"
         * } */
        Server: {
            /**
             * Description
             * @description The description associated with the server
             */
            about?: string;
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the server
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             * @description The banner image associated with the server
             */
            banner?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server was created at
             */
            createdAt: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The channel ID of the default channel of the server. This channel is defined as the first chat or voice channel in the left sidebar of a server in our UI. This channel is useful for sending welcome messages, though note that a bot may not have permissions to interact with this channel depending on how the server is configured.
             */
            defaultChannelId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            id: string;
            /**
             * Is verified
             * @description The verified status of the server
             */
            isVerified?: boolean;
            /**
             * Server name
             * @description The name given to the server
             */
            name: string;
            /**
             * Created by
             * @description The ID of the user who created this server
             */
            ownerId: string;
            /**
             * Timezone
             * @description The timezone associated with the server
             */
            timezone?: string;
            /**
             * Server type
             * @description The type of server designated from the server's settings page
             * @enum {string}
             */
            type?: "team" | "organization" | "community" | "clan" | "guild" | "friends" | "streaming" | "other";
            /**
             * Server URL
             * @description The URL that the server can be accessible from. For example, a value of "Guilded-Official" means the server can be accessible from https://www.guilded.gg/Guilded-Official
             */
            url?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "chat",
         *   "name": "The Dank Cellar",
         *   "topic": "Dank memes ONLY",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p"
         * } */
        ServerChannel: {
            /**
             * Archived at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was archived at, if relevant
             */
            archivedAt?: string;
            /**
             * Archived by
             * @description The ID of the user who archived this channel
             */
            archivedBy?: string;
            /** @description The category that the channel exists in. Only relevant for server channels */
            categoryId?: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this channel
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            id: string;
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message that this channel was created off of. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            messageId?: string;
            /** @description The name of the channel */
            name: string;
            /**
             * Channel ID
             * Format: uuid
             * @description ID of the **immediate** parent channel or thread in the channel hierarchy. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            parentId?: string;
            /**
             * Priority
             * @description The priority of the channel will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in ascending order. Due to legacy issues, sending a null value is not possible
             */
            priority?: number;
            /**
             * Channel ID
             * Format: uuid
             * @description ID of the **root** channel or thread in the channel hierarchy. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            rootId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /** @description The topic of the channel. Not applicable to threads */
            topic?: string;
            /**
             * @description The type of channel. This will determine what routes to use for creating content in a channel. For example, if this "chat", then one must use the routes for creating channel messages
             * @enum {string}
             */
            type: "announcements" | "chat" | "calendar" | "forums" | "media" | "docs" | "voice" | "list" | "scheduling" | "stream";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * @description What users can access the channel. Only applicable to server channels. If not present, this channel will respect normal permissions. `public` is accessible to everyone, even those who aren't of the server. `private` is only accessible to explicitly mentioned users. Currently, threads cannot be `public` and other channels cannot be `private`. Additionally, `private` threads can only exist with an associated `messageId` that is for a private message
             * @enum {string|null}
             */
            visibility?: null | "private" | "public";
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch",
         *     "createdAt": "2021-06-15T20:15:00.706Z"
         *   },
         *   "roleIds": [],
         *   "nickname": "Professor Chaos",
         *   "joinedAt": "2021-07-15T20:15:00.706Z"
         * } */
        ServerMember: {
            /**
             * Is owner
             * @default false
             */
            isOwner: boolean;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the member was created at
             */
            joinedAt: string;
            /** Nickname */
            nickname?: string;
            /** Role IDs */
            roleIds: number[];
            user: components["schemas"]["User"];
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "reason": "More toxic than a poison PokÃ©mon",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ServerMemberBan: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server member ban was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this server member ban
             */
            createdBy: string;
            /**
             * Reason
             * @description The reason for the ban as submitted by the banner
             */
            reason?: string;
            user: components["schemas"]["UserSummary"];
        };
        /** @example {
         *   "permissions": [
         *     "CanUpdateServer",
         *     "CanReadChats",
         *     "CanCreateChats"
         *   ]
         * } */
        ServerMemberPermissions: {
            /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
            permissions: string[];
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "roleIds": []
         * } */
        ServerMemberSummary: {
            /** Role IDs */
            roleIds: number[];
            user: components["schemas"]["UserSummary"];
        };
        /** @example {
         *   "type": "Gold",
         *   "serverId": "wlVr3Ggl",
         *   "roleId": 591232,
         *   "description": "Once you subscribe, this tier's benefits are free for the rest of the month!",
         *   "cost": 500,
         *   "createdAt": "2021-06-15T20:15:00.706Z"
         * } */
        ServerSubscriptionTier: {
            /** @description The cost of the tier in cents USD per month */
            cost: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server subscription tier was created at
             */
            createdAt: string;
            /**
             * Description
             * @description The description associated with the server subscription tier
             */
            description?: string;
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Server subscription tier type
             * @description The type of the server subscription tier. This field is case sensitive!!
             * @enum {string}
             */
            type: "Gold" | "Silver" | "Copper";
        };
        /** @example {
         *   "type": "roblox",
         *   "userId": "Ann6LewA",
         *   "handle": "builderman",
         *   "serviceId": "156",
         *   "createdAt": "2006-03-08T20:15:00.706Z"
         * } */
        SocialLink: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the social link was created at
             */
            createdAt: string;
            /** @description The handle of the user within the external service */
            handle?: string;
            /** @description The unique ID that represents this member's social link within the external service */
            serviceId?: string;
            /**
             * Social link type
             * @description The type of social link that Guilded supports. Depending on this value, `handle` or `serviceId` may or may not be present
             * @enum {string}
             */
            type: "twitch" | "bnet" | "psn" | "xbox" | "steam" | "origin" | "youtube" | "twitter" | "facebook" | "switch" | "patreon" | "roblox" | "epic";
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user that the social link is associated with
             */
            userId: string;
        };
        /** @example {
         *   "url": "https://cdn.gldcdn.com/TeamAvatar/f3ca3496e7f2b6bfaeddfbb6526bdec7-Large.png?w=450&h=450"
         * } */
        UrlSignature: {
            /** @description The number of seconds to wait before retrying the request */
            retryAfter?: number;
            /** @description The url with a valid signature that has a 5 minute expiration on the signature */
            signature?: string;
            /** @description The URL that is to be signed */
            url: string;
        };
        /** @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch",
         *   "createdAt": "2021-06-15T20:15:00.706Z"
         * } */
        User: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the user
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             * @description The banner image associated with the user
             */
            banner?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the user was created at
             */
            createdAt: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            id: string;
            /**
             * User name
             * @description The user's name
             */
            name: string;
            status?: components["schemas"]["UserStatus"];
            /**
             * User type
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
        };
        /** @example {
         *   "content": "Ready for the weekend!",
         *   "emoteId": 90000000
         * } */
        UserStatus: {
            /**
             * Content
             * Format: status markdown
             * @description The content of the user status. The supported markdown for this content only includes reactions and plaintext for now
             */
            content?: string;
            /** @description Emote ID */
            emoteId: number;
        };
        /** @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch"
         * } */
        UserSummary: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the user
             */
            avatar?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            id: string;
            /**
             * User name
             * @description The user's name
             */
            name: string;
            /**
             * User type
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "E-102 Gamma",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        Webhook: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the webhook
             */
            avatar?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the webhook was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this webhook
             */
            createdBy: string;
            /**
             * Deleted at
             * Format: date-time
             * @description The ISO 8601 timestamp that the webhook was deleted at
             */
            deletedAt?: string;
            /**
             * Webhook ID
             * Format: uuid
             * @description The ID of the webhook
             */
            id: string;
            /**
             * Name
             * @description The name of the webhook
             */
            name: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Token
             * @description The token of the webhook
             */
            token?: string;
        };
    };
    responses: {
        _WelcomeMessage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Bot ID
                     * Format: uuid
                     * @description The ID of the bot
                     */
                    botId: string;
                    /** @description The interval in milliseconds that your bot should be configured to send ping frames for the bot's [heartbeat](/docs/api/heartbeat) to be considered valid. */
                    heartbeatIntervalMs: number;
                    /** @description The last message's ID that was sent to this bot. See [event replay](/docs/api/replay) for more details */
                    lastMessageId: string;
                    user: components["schemas"]["User"] & unknown;
                };
            };
        };
        AnnouncementCommentCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcementComment: components["schemas"]["AnnouncementComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementCommentDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcementComment: components["schemas"]["AnnouncementComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementCommentReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["AnnouncementCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementCommentReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["AnnouncementCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementCommentUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcementComment: components["schemas"]["AnnouncementComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcement: components["schemas"]["Announcement"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcement: components["schemas"]["Announcement"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["AnnouncementReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["AnnouncementReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        AnnouncementUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    announcement: components["schemas"]["Announcement"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        /** @description Emitted when a bot is added to a server */
        BotServerMembershipCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Created by
                     * @description The ID of the user who created this server membership
                     */
                    createdBy: string;
                    server: components["schemas"]["Server"];
                };
            };
        };
        /** @description Emitted when a bot is removed from a server */
        BotServerMembershipDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Deleted by
                     * @description The ID of the user who deleted this server membership
                     */
                    deletedBy: string;
                    server: components["schemas"]["Server"];
                };
            };
        };
        CalendarEventCommentCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventCommentDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventCommentReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["CalendarEventCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventCommentReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["CalendarEventCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventCommentUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEvent: components["schemas"]["CalendarEvent"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEvent: components["schemas"]["CalendarEvent"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["CalendarEventReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["CalendarEventReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventRsvpDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventRsvpManyUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventRsvps: components["schemas"]["CalendarEventRsvp"][];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventRsvpUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventSeriesDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Calendar event ID
                     * @description The calendar event deletions started at
                     */
                    calendarEventId?: number;
                    calendarEventSeries: components["schemas"]["CalendarEventSeries"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventSeriesUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Calendar event ID
                     * @description The calendar event updates started at
                     */
                    calendarEventId?: number;
                    calendarEventSeries: components["schemas"]["CalendarEventSeries"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CalendarEventUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    calendarEvent: components["schemas"]["CalendarEvent"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CategoryCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    category: components["schemas"]["Category"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CategoryDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    category: components["schemas"]["Category"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        CategoryUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    category: components["schemas"]["Category"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelArchived: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channel: components["schemas"]["ServerChannel"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryRolePermissionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryRolePermissionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryRolePermissionUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryUserPermissionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryUserPermissionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelCategoryUserPermissionUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelMessagePinned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: components["schemas"]["ChatMessage"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelMessageReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["ChatMessageReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelMessageReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Deleted by
                     * @description The ID of the user who deleted this reaction
                     */
                    deletedBy: string;
                    reaction: components["schemas"]["ChatMessageReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelMessageReactionManyDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Channel ID
                     * Format: uuid
                     * @description The ID of the channel
                     */
                    channelId: string;
                    /** @description The count of reactions that were removed */
                    count: number;
                    /**
                     * Deleted by
                     * @description The ID of the user who deleted this reaction
                     */
                    deletedBy: string;
                    /** @description If present, only reactions of this emote were bulk removed from the message */
                    emote?: components["schemas"]["Emote"];
                    /**
                     * Message ID
                     * Format: uuid
                     * @description The ID of the message
                     */
                    messageId: string;
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelMessageUnpinned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: components["schemas"]["ChatMessage"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelRestored: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channel: components["schemas"]["ServerChannel"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelRolePermissionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelRolePermissionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelRolePermissionUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelUserPermissionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelUserPermissionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChannelUserPermissionUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChatMessageCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: components["schemas"]["ChatMessage"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChatMessageDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Deleted at
                     * Format: date-time
                     * @description The ISO 8601 timestamp that the message was deleted at
                     */
                    deletedAt: string;
                    /** @example {
                     *   "id": "00000000-0000-0000-0000-000000000000",
                     *   "type": "default",
                     *   "serverId": "wlVr3Ggl",
                     *   "groupId": "ZVzBo83p",
                     *   "channelId": "00000000-0000-0000-0000-000000000000",
                     *   "content": "Hello **world**!",
                     *   "embeds": [
                     *     {
                     *       "title": "embed title",
                     *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
                     *       "url": "https://www.guilded.gg",
                     *       "color": 6118369,
                     *       "timestamp": "2022-04-12T22:14:36.737Z",
                     *       "footer": {
                     *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
                     *         "text": "footer text"
                     *       },
                     *       "thumbnail": {
                     *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
                     *       },
                     *       "image": {
                     *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
                     *       },
                     *       "author": {
                     *         "name": "Gil",
                     *         "url": "https://www.guilded.gg",
                     *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
                     *       },
                     *       "fields": [
                     *         {
                     *           "name": "hello",
                     *           "value": "these are fields"
                     *         },
                     *         {
                     *           "name": "~~help i have been crossed out~~",
                     *           "value": "~~oh noes~~",
                     *           "inline": true
                     *         },
                     *         {
                     *           "name": "another inline",
                     *           "value": "field",
                     *           "inline": true
                     *         }
                     *       ]
                     *     }
                     *   ],
                     *   "createdAt": "2021-06-15T20:15:00.706Z",
                     *   "createdBy": "Ann6LewA"
                     * } */
                    message: {
                        /**
                         * Channel ID
                         * Format: uuid
                         * @description The ID of the channel
                         */
                        channelId: string;
                        /**
                         * Content
                         * Format: chat markdown
                         * @description The content of the message
                         */
                        content?: string;
                        /**
                         * Created at
                         * Format: date-time
                         * @description The ISO 8601 timestamp that the message was created at
                         */
                        createdAt: string;
                        /**
                         * Created by
                         * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
                         */
                        createdBy: string;
                        /**
                         * Created by Webhook ID
                         * @description The ID of the webhook who created this message, if it was created by a webhook
                         */
                        createdByWebhookId?: string;
                        /**
                         * Deleted at
                         * Format: date-time
                         * @description The ISO 8601 timestamp that the message was deleted at
                         */
                        deletedAt: string;
                        embeds?: components["schemas"]["ChatEmbed"][];
                        /**
                         * Group ID
                         * @description The ID of the group
                         */
                        groupId?: string;
                        /**
                         * Hidden content link preview URLs
                         * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
                         */
                        hiddenLinkPreviewUrls?: string[];
                        /**
                         * Message ID
                         * Format: uuid
                         * @description The ID of the message
                         */
                        id: string;
                        /**
                         * Is pinned
                         * @default false
                         */
                        isPinned: boolean;
                        /**
                         * Is private
                         * @description If set, this message will only be seen by those mentioned or replied to
                         */
                        isPrivate?: boolean;
                        /**
                         * Is silent
                         * @description If set, this message did not notify mention or reply recipients
                         * @default false
                         */
                        isSilent: boolean;
                        mentions?: components["schemas"]["Mentions"];
                        /** @description Message IDs that were replied to */
                        replyMessageIds?: string[];
                        /**
                         * Server ID
                         * @description The ID of the server
                         */
                        serverId?: string;
                        /**
                         * Type
                         * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
                         * @enum {string}
                         */
                        type: "default" | "system";
                        /**
                         * Updated at
                         * Format: date-time
                         * @description The ISO 8601 timestamp that the message was updated at, if relevant
                         */
                        updatedAt?: string;
                    };
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ChatMessageUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: components["schemas"]["ChatMessage"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCommentCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    docComment: components["schemas"]["DocComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCommentDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    docComment: components["schemas"]["DocComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCommentReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["DocCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCommentReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["DocCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCommentUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    docComment: components["schemas"]["DocComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    doc: components["schemas"]["Doc"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    doc: components["schemas"]["Doc"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["DocReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["DocReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        DocUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    doc: components["schemas"]["Doc"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCommentCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCommentDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCommentReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["ForumTopicCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCommentReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["ForumTopicCommentReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCommentUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicLocked: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicPinned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicReactionCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["ForumTopicReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicReactionDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    reaction: components["schemas"]["ForumTopicReaction"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicUnlocked: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicUnpinned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ForumTopicUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    forumTopic: components["schemas"]["ForumTopic"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        GroupCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    group: components["schemas"]["Group"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        GroupDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    group: components["schemas"]["Group"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        GroupUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    group: components["schemas"]["Group"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ListItemCompleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    listItem: components["schemas"]["ListItem"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ListItemCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    listItem: components["schemas"]["ListItem"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ListItemDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    listItem: components["schemas"]["ListItem"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ListItemUncompleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    listItem: components["schemas"]["ListItem"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ListItemUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    listItem: components["schemas"]["ListItem"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        RoleCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    role: components["schemas"]["Role"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        RoleDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    role: components["schemas"]["Role"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        RoleUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    role: components["schemas"]["Role"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ServerChannelCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channel: components["schemas"]["ServerChannel"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ServerChannelDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channel: components["schemas"]["ServerChannel"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ServerChannelUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    channel: components["schemas"]["ServerChannel"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ServerMemberBanned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    serverMemberBan: components["schemas"]["ServerMemberBan"];
                };
            };
        };
        ServerMemberJoined: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    member: components["schemas"]["ServerMember"];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    /** @description Count of members in this server after this join. **Note:** at higher member counts (1000+), this value is only updated periodically and should not be used in situations that require absolute accuracy */
                    serverMemberCount: number;
                };
            };
        };
        ServerMemberRemoved: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Is ban?
                     * @description If this member leaving was the result of a ban
                     */
                    isBan?: boolean;
                    /**
                     * Is kick?
                     * @description If this member leaving was the result of a kick
                     */
                    isKick?: boolean;
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    /**
                     * User ID
                     * Format: user-id
                     * @description The ID of the user
                     */
                    userId: string;
                };
            };
        };
        ServerMemberSocialLinkCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerMemberSocialLinkDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerMemberSocialLinkUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerMemberUnbanned: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    serverMemberBan: components["schemas"]["ServerMemberBan"];
                };
            };
        };
        ServerMemberUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    userInfo: {
                        /**
                         * User ID
                         * Format: user-id
                         * @description The ID of the user
                         */
                        id: string;
                        /**
                         * Nickname
                         * @description The nickname that was just updated for the user
                         */
                        nickname?: string | null;
                    };
                };
            };
        };
        ServerRolesUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    memberRoleIds: {
                        /**
                         * Role IDs
                         * @description The IDs of the roles that the member currently has _after_ this operation
                         */
                        roleIds: number[];
                        /**
                         * User ID
                         * Format: user-id
                         * @description The ID of the member that had roles updated
                         */
                        userId: string;
                    }[];
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                };
            };
        };
        ServerWebhookCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    webhook: components["schemas"]["Webhook"];
                };
            };
        };
        ServerWebhookUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Server ID
                     * @description The ID of the server
                     */
                    serverId: string;
                    webhook: components["schemas"]["Webhook"];
                };
            };
        };
        UserStatusCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * Expires at
                     * Format: date-time
                     * @description An ISO 8601 timestamp that will be used to indicate when an expiration occurs. Expiration usually will not occur exactly at this time. Bot logic should not expect a guarantee of timing as a result, but can expect that it'll happen very shortly afterwards
                     */
                    expiresAt?: string;
                    /**
                     * User ID
                     * Format: user-id
                     * @description The ID of the user
                     */
                    userId: string;
                    userStatus: components["schemas"]["UserStatus"];
                };
            };
        };
        UserStatusDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * User ID
                     * Format: user-id
                     * @description The ID of the user
                     */
                    userId: string;
                    userStatus: components["schemas"]["UserStatus"];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SocketEventEnvelope = components['schemas']['_SocketEventEnvelope'];
export type Announcement = components['schemas']['Announcement'];
export type AnnouncementComment = components['schemas']['AnnouncementComment'];
export type AnnouncementCommentReaction = components['schemas']['AnnouncementCommentReaction'];
export type AnnouncementReaction = components['schemas']['AnnouncementReaction'];
export type CalendarEvent = components['schemas']['CalendarEvent'];
export type CalendarEventComment = components['schemas']['CalendarEventComment'];
export type CalendarEventCommentReaction = components['schemas']['CalendarEventCommentReaction'];
export type CalendarEventReaction = components['schemas']['CalendarEventReaction'];
export type CalendarEventRsvp = components['schemas']['CalendarEventRsvp'];
export type CalendarEventSeries = components['schemas']['CalendarEventSeries'];
export type Category = components['schemas']['Category'];
export type ChannelCategoryRolePermission = components['schemas']['ChannelCategoryRolePermission'];
export type ChannelCategoryUserPermission = components['schemas']['ChannelCategoryUserPermission'];
export type ChannelRolePermission = components['schemas']['ChannelRolePermission'];
export type ChannelUserPermission = components['schemas']['ChannelUserPermission'];
export type ChatEmbed = components['schemas']['ChatEmbed'];
export type ChatMessage = components['schemas']['ChatMessage'];
export type ChatMessageReaction = components['schemas']['ChatMessageReaction'];
export type Doc = components['schemas']['Doc'];
export type DocComment = components['schemas']['DocComment'];
export type DocCommentReaction = components['schemas']['DocCommentReaction'];
export type DocReaction = components['schemas']['DocReaction'];
export type Emote = components['schemas']['Emote'];
export type ForumTopic = components['schemas']['ForumTopic'];
export type ForumTopicComment = components['schemas']['ForumTopicComment'];
export type ForumTopicCommentReaction = components['schemas']['ForumTopicCommentReaction'];
export type ForumTopicReaction = components['schemas']['ForumTopicReaction'];
export type ForumTopicSummary = components['schemas']['ForumTopicSummary'];
export type Group = components['schemas']['Group'];
export type ListItem = components['schemas']['ListItem'];
export type ListItemSummary = components['schemas']['ListItemSummary'];
export type Mentions = components['schemas']['Mentions'];
export type Role = components['schemas']['Role'];
export type Server = components['schemas']['Server'];
export type ServerChannel = components['schemas']['ServerChannel'];
export type ServerMember = components['schemas']['ServerMember'];
export type ServerMemberBan = components['schemas']['ServerMemberBan'];
export type ServerMemberPermissions = components['schemas']['ServerMemberPermissions'];
export type ServerMemberSummary = components['schemas']['ServerMemberSummary'];
export type ServerSubscriptionTier = components['schemas']['ServerSubscriptionTier'];
export type SocialLink = components['schemas']['SocialLink'];
export type UrlSignature = components['schemas']['UrlSignature'];
export type User = components['schemas']['User'];
export type UserStatus = components['schemas']['UserStatus'];
export type UserSummary = components['schemas']['UserSummary'];
export type Webhook = components['schemas']['Webhook'];
export type ResponseWelcomeMessage = components['responses']['_WelcomeMessage'];
export type ResponseAnnouncementCommentCreated = components['responses']['AnnouncementCommentCreated'];
export type ResponseAnnouncementCommentDeleted = components['responses']['AnnouncementCommentDeleted'];
export type ResponseAnnouncementCommentReactionCreated = components['responses']['AnnouncementCommentReactionCreated'];
export type ResponseAnnouncementCommentReactionDeleted = components['responses']['AnnouncementCommentReactionDeleted'];
export type ResponseAnnouncementCommentUpdated = components['responses']['AnnouncementCommentUpdated'];
export type ResponseAnnouncementCreated = components['responses']['AnnouncementCreated'];
export type ResponseAnnouncementDeleted = components['responses']['AnnouncementDeleted'];
export type ResponseAnnouncementReactionCreated = components['responses']['AnnouncementReactionCreated'];
export type ResponseAnnouncementReactionDeleted = components['responses']['AnnouncementReactionDeleted'];
export type ResponseAnnouncementUpdated = components['responses']['AnnouncementUpdated'];
export type ResponseBotServerMembershipCreated = components['responses']['BotServerMembershipCreated'];
export type ResponseBotServerMembershipDeleted = components['responses']['BotServerMembershipDeleted'];
export type ResponseCalendarEventCommentCreated = components['responses']['CalendarEventCommentCreated'];
export type ResponseCalendarEventCommentDeleted = components['responses']['CalendarEventCommentDeleted'];
export type ResponseCalendarEventCommentReactionCreated = components['responses']['CalendarEventCommentReactionCreated'];
export type ResponseCalendarEventCommentReactionDeleted = components['responses']['CalendarEventCommentReactionDeleted'];
export type ResponseCalendarEventCommentUpdated = components['responses']['CalendarEventCommentUpdated'];
export type ResponseCalendarEventCreated = components['responses']['CalendarEventCreated'];
export type ResponseCalendarEventDeleted = components['responses']['CalendarEventDeleted'];
export type ResponseCalendarEventReactionCreated = components['responses']['CalendarEventReactionCreated'];
export type ResponseCalendarEventReactionDeleted = components['responses']['CalendarEventReactionDeleted'];
export type ResponseCalendarEventRsvpDeleted = components['responses']['CalendarEventRsvpDeleted'];
export type ResponseCalendarEventRsvpManyUpdated = components['responses']['CalendarEventRsvpManyUpdated'];
export type ResponseCalendarEventRsvpUpdated = components['responses']['CalendarEventRsvpUpdated'];
export type ResponseCalendarEventSeriesDeleted = components['responses']['CalendarEventSeriesDeleted'];
export type ResponseCalendarEventSeriesUpdated = components['responses']['CalendarEventSeriesUpdated'];
export type ResponseCalendarEventUpdated = components['responses']['CalendarEventUpdated'];
export type ResponseCategoryCreated = components['responses']['CategoryCreated'];
export type ResponseCategoryDeleted = components['responses']['CategoryDeleted'];
export type ResponseCategoryUpdated = components['responses']['CategoryUpdated'];
export type ResponseChannelArchived = components['responses']['ChannelArchived'];
export type ResponseChannelCategoryRolePermissionCreated = components['responses']['ChannelCategoryRolePermissionCreated'];
export type ResponseChannelCategoryRolePermissionDeleted = components['responses']['ChannelCategoryRolePermissionDeleted'];
export type ResponseChannelCategoryRolePermissionUpdated = components['responses']['ChannelCategoryRolePermissionUpdated'];
export type ResponseChannelCategoryUserPermissionCreated = components['responses']['ChannelCategoryUserPermissionCreated'];
export type ResponseChannelCategoryUserPermissionDeleted = components['responses']['ChannelCategoryUserPermissionDeleted'];
export type ResponseChannelCategoryUserPermissionUpdated = components['responses']['ChannelCategoryUserPermissionUpdated'];
export type ResponseChannelMessagePinned = components['responses']['ChannelMessagePinned'];
export type ResponseChannelMessageReactionCreated = components['responses']['ChannelMessageReactionCreated'];
export type ResponseChannelMessageReactionDeleted = components['responses']['ChannelMessageReactionDeleted'];
export type ResponseChannelMessageReactionManyDeleted = components['responses']['ChannelMessageReactionManyDeleted'];
export type ResponseChannelMessageUnpinned = components['responses']['ChannelMessageUnpinned'];
export type ResponseChannelRestored = components['responses']['ChannelRestored'];
export type ResponseChannelRolePermissionCreated = components['responses']['ChannelRolePermissionCreated'];
export type ResponseChannelRolePermissionDeleted = components['responses']['ChannelRolePermissionDeleted'];
export type ResponseChannelRolePermissionUpdated = components['responses']['ChannelRolePermissionUpdated'];
export type ResponseChannelUserPermissionCreated = components['responses']['ChannelUserPermissionCreated'];
export type ResponseChannelUserPermissionDeleted = components['responses']['ChannelUserPermissionDeleted'];
export type ResponseChannelUserPermissionUpdated = components['responses']['ChannelUserPermissionUpdated'];
export type ResponseChatMessageCreated = components['responses']['ChatMessageCreated'];
export type ResponseChatMessageDeleted = components['responses']['ChatMessageDeleted'];
export type ResponseChatMessageUpdated = components['responses']['ChatMessageUpdated'];
export type ResponseDocCommentCreated = components['responses']['DocCommentCreated'];
export type ResponseDocCommentDeleted = components['responses']['DocCommentDeleted'];
export type ResponseDocCommentReactionCreated = components['responses']['DocCommentReactionCreated'];
export type ResponseDocCommentReactionDeleted = components['responses']['DocCommentReactionDeleted'];
export type ResponseDocCommentUpdated = components['responses']['DocCommentUpdated'];
export type ResponseDocCreated = components['responses']['DocCreated'];
export type ResponseDocDeleted = components['responses']['DocDeleted'];
export type ResponseDocReactionCreated = components['responses']['DocReactionCreated'];
export type ResponseDocReactionDeleted = components['responses']['DocReactionDeleted'];
export type ResponseDocUpdated = components['responses']['DocUpdated'];
export type ResponseForumTopicCommentCreated = components['responses']['ForumTopicCommentCreated'];
export type ResponseForumTopicCommentDeleted = components['responses']['ForumTopicCommentDeleted'];
export type ResponseForumTopicCommentReactionCreated = components['responses']['ForumTopicCommentReactionCreated'];
export type ResponseForumTopicCommentReactionDeleted = components['responses']['ForumTopicCommentReactionDeleted'];
export type ResponseForumTopicCommentUpdated = components['responses']['ForumTopicCommentUpdated'];
export type ResponseForumTopicCreated = components['responses']['ForumTopicCreated'];
export type ResponseForumTopicDeleted = components['responses']['ForumTopicDeleted'];
export type ResponseForumTopicLocked = components['responses']['ForumTopicLocked'];
export type ResponseForumTopicPinned = components['responses']['ForumTopicPinned'];
export type ResponseForumTopicReactionCreated = components['responses']['ForumTopicReactionCreated'];
export type ResponseForumTopicReactionDeleted = components['responses']['ForumTopicReactionDeleted'];
export type ResponseForumTopicUnlocked = components['responses']['ForumTopicUnlocked'];
export type ResponseForumTopicUnpinned = components['responses']['ForumTopicUnpinned'];
export type ResponseForumTopicUpdated = components['responses']['ForumTopicUpdated'];
export type ResponseGroupCreated = components['responses']['GroupCreated'];
export type ResponseGroupDeleted = components['responses']['GroupDeleted'];
export type ResponseGroupUpdated = components['responses']['GroupUpdated'];
export type ResponseListItemCompleted = components['responses']['ListItemCompleted'];
export type ResponseListItemCreated = components['responses']['ListItemCreated'];
export type ResponseListItemDeleted = components['responses']['ListItemDeleted'];
export type ResponseListItemUncompleted = components['responses']['ListItemUncompleted'];
export type ResponseListItemUpdated = components['responses']['ListItemUpdated'];
export type ResponseRoleCreated = components['responses']['RoleCreated'];
export type ResponseRoleDeleted = components['responses']['RoleDeleted'];
export type ResponseRoleUpdated = components['responses']['RoleUpdated'];
export type ResponseServerChannelCreated = components['responses']['ServerChannelCreated'];
export type ResponseServerChannelDeleted = components['responses']['ServerChannelDeleted'];
export type ResponseServerChannelUpdated = components['responses']['ServerChannelUpdated'];
export type ResponseServerMemberBanned = components['responses']['ServerMemberBanned'];
export type ResponseServerMemberJoined = components['responses']['ServerMemberJoined'];
export type ResponseServerMemberRemoved = components['responses']['ServerMemberRemoved'];
export type ResponseServerMemberSocialLinkCreated = components['responses']['ServerMemberSocialLinkCreated'];
export type ResponseServerMemberSocialLinkDeleted = components['responses']['ServerMemberSocialLinkDeleted'];
export type ResponseServerMemberSocialLinkUpdated = components['responses']['ServerMemberSocialLinkUpdated'];
export type ResponseServerMemberUnbanned = components['responses']['ServerMemberUnbanned'];
export type ResponseServerMemberUpdated = components['responses']['ServerMemberUpdated'];
export type ResponseServerRolesUpdated = components['responses']['ServerRolesUpdated'];
export type ResponseServerWebhookCreated = components['responses']['ServerWebhookCreated'];
export type ResponseServerWebhookUpdated = components['responses']['ServerWebhookUpdated'];
export type ResponseUserStatusCreated = components['responses']['UserStatusCreated'];
export type ResponseUserStatusDeleted = components['responses']['UserStatusDeleted'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
