// this file was autogenerated by @jersey/openapi

export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *   "id": "9RVMoDZy",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "title": "Pizza Party, don't be tardy!",
         *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
         * } */
        Announcement: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the announcement
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this announcement
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the announcement
             */
            title: string;
        };
        /** @example {
         *   "id": 123456,
         *   "content": "Now THAT is one awesome announcement!!!",
         *   "createdAt": "2023-04-07T16:19:00.000Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "announcementId": "9RVMoDZy",
         *   "createdBy": "Ann6LewA"
         * } */
        AnnouncementComment: {
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the announcement comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this announcement comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Announcement comment ID
             * @description The ID of the announcement comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the announcement comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy",
         *   "announcementCommentId": 123456
         * } */
        AnnouncementCommentReaction: {
            /**
             * Announcement comment ID
             * @description The ID of the announcement comment
             */
            announcementCommentId: number;
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy"
         * } */
        AnnouncementReaction: {
            /**
             * Announcement ID
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "id": 1,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "Surprise LAN party for my wife ðŸ¤«",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "duration": 60,
         *   "color": 6118369,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        CalendarEvent: {
            /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
            autofillWaitlist?: boolean;
            cancellation?: {
                /**
                 * Created by
                 * @description The ID of the user who created this event cancellation
                 */
                createdBy: string;
                /**
                 * Description
                 * Format: long-form markdown
                 * @description The description of event cancellation
                 */
                description?: string;
            };
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /** @description The integer value corresponds to the decimal RGB representation for the color. The color of the event when viewing in the calendar */
            color?: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this event
             */
            createdBy: string;
            /**
             * Description
             * Format: long-form markdown
             * @description The description of the event
             */
            description?: string;
            /**
             * Duration
             * @description The duration of the event _**in minutes**_
             */
            duration?: number;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            id: number;
            /**
             * Is all day
             * @description Does the event last all day
             */
            isAllDay?: boolean;
            /** Is private */
            isPrivate?: boolean;
            /**
             * Location
             * @description The location of the event
             */
            location?: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Name
             * @description The name of the event
             */
            name: string;
            /** @description Is this event a repeating event */
            repeats?: boolean;
            /**
             * Role IDs
             * @description The role IDs to restrict the event to
             */
            roleIds?: number[];
            /**
             * RSVP disabled
             * @description When disabled, users will not be able to RSVP to the event
             */
            rsvpDisabled?: boolean;
            /** @description The number of RSVPs to allow before waitlisting RSVPs */
            rsvpLimit?: number;
            /**
             * Calendar event series ID
             * Format: uuid
             * @description The ID of the calendar event series. Only shows if the event is repeating
             */
            seriesId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Starts at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event starts at
             */
            startsAt: string;
            /**
             * Format: uri
             * @description A URL to associate with the event
             */
            url?: string;
        };
        /** @example {
         *   "id": 1234567890,
         *   "content": "I will be there!!",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2022-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "calendarEventId": 987654321
         * } */
        CalendarEventComment: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the calendar event comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the calendar event comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this calendar event comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Calendar event comment ID
             * @description The ID of the calendar event comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the calendar event comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1,
         *   "calendarEventCommentId": 1234567890
         * } */
        CalendarEventCommentReaction: {
            /**
             * Calendar event comment ID
             * @description The ID of the calendar event comment
             */
            calendarEventCommentId: number;
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1
         * } */
        CalendarEventReaction: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "calendarEventId": 1,
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "userId": "Ann6LewA",
         *   "status": "going",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        CalendarEventRsvp: {
            /**
             * Calendar event ID
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the RSVP was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this RSVP
             */
            createdBy: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Status
             * @description The status of the RSVP
             * @enum {string}
             */
            status: "going" | "maybe" | "declined" | "invited" | "waitlisted" | "not responded";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the RSVP was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this RSVP
             */
            updatedBy?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        CalendarEventSeries: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Calendar event series ID
             * Format: uuid
             * @description The ID of the calendar event series
             */
            id: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
        };
        /** @example {
         *   "id": 1337,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "name": "Social",
         *   "createdAt": "2023-07-07T20:15:00.706Z",
         *   "updatedAt": "2023-07-08T20:15:00.706Z"
         * } */
        Category: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the category was created at
             */
            createdAt: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the category */
            id: number;
            /** @description Name of the category */
            name: string;
            /**
             * Priority
             * @description The priority of the category will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in descending order. Due to legacy issues, sending a null value is not possible
             */
            priority?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the category was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "roleId": 591232,
         *   "categoryId": 1337
         * } */
        ChannelCategoryRolePermission: {
            /** @description The ID of the category */
            categoryId: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId: number;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "userId": "Ann6LewA",
         *   "categoryId": 1337
         * } */
        ChannelCategoryUserPermission: {
            /** @description The ID of the category */
            categoryId: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "roleId": 591232,
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChannelRolePermission: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId: number;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-06-15T20:15:00.706Z",
         *   "permissions": {
         *     "CanUpdateServer": true,
         *     "CanReadChats": true
         *   },
         *   "userId": "Ann6LewA",
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChannelUserPermission: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was created at
             */
            createdAt: string;
            permissions: {
                [key: string]: boolean;
            };
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the permission override was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            userId: string;
        };
        /**
         * @description Rich content sections optionally associated with chat messages. Properties with "webhook-markdown" support allow for the following: link, italic, bold, strikethrough, underline, inline code, block code, reaction, mention, and role mention.
         * @example {
         *   "title": "embed title",
         *   "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *   "url": "https://www.guilded.gg",
         *   "color": 6118369,
         *   "timestamp": "2022-04-12T22:14:36.737Z",
         *   "footer": {
         *     "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *     "text": "footer text"
         *   },
         *   "thumbnail": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *   },
         *   "image": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *   },
         *   "author": {
         *     "name": "Gil",
         *     "url": "https://www.guilded.gg",
         *     "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *   },
         *   "fields": [
         *     {
         *       "name": "hello",
         *       "value": "these are fields"
         *     },
         *     {
         *       "name": "~~help i have been crossed out~~",
         *       "value": "~~oh noes~~",
         *       "inline": true
         *     },
         *     {
         *       "name": "another inline",
         *       "value": "field",
         *       "inline": true
         *     }
         *   ]
         * }
         */
        ChatEmbed: {
            /** @description A small section above the title of the embed */
            author?: {
                /**
                 * Format: media-uri
                 * @description URL of a small image to display to the left of the author's `name`
                 */
                icon_url?: string;
                /** @description Name of the author */
                name?: string;
                /**
                 * Format: uri
                 * @description URL to linkify the author's `name` field
                 */
                url?: string;
            };
            /** @description The integer value corresponds to the decimal RGB representation for the color. The color that the left border should be */
            color?: number;
            /**
             * Format: webhook-markdown
             * @description Subtext of the embed
             */
            description?: string;
            /** @description Table-like cells to add to the embed */
            fields?: {
                /**
                 * @description If the field should wrap or not
                 * @default false
                 */
                inline: boolean;
                /**
                 * Format: webhook-markdown
                 * @description Header of the table-like cell
                 */
                name: string;
                /**
                 * Format: webhook-markdown
                 * @description Subtext of the table-like cell
                 */
                value: string;
            }[];
            /** @description A small section at the bottom of the embed */
            footer?: {
                /**
                 * Format: media-uri
                 * @description URL of a small image to put in the footer
                 */
                icon_url?: string;
                /** @description Text of the footer */
                text: string;
            };
            /** @description The main picture to associate with the embed */
            image?: {
                /**
                 * Format: media-uri
                 * @description URL of the image
                 */
                url?: string;
            };
            /** @description An image to the right of the embed's content */
            thumbnail?: {
                /**
                 * Format: media-uri
                 * @description URL of the image
                 */
                url?: string;
            };
            /**
             * Format: date-time
             * @description A timestamp to put in the footer
             */
            timestamp?: string;
            /**
             * Format: webhook-markdown
             * @description Main header of the embed
             */
            title?: string;
            /**
             * Format: uri
             * @description URL to linkify the `title` field with
             */
            url?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "default",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "content": "Hello **world**!",
         *   "embeds": [
         *     {
         *       "title": "embed title",
         *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *       "url": "https://www.guilded.gg",
         *       "color": 6118369,
         *       "timestamp": "2022-04-12T22:14:36.737Z",
         *       "footer": {
         *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *         "text": "footer text"
         *       },
         *       "thumbnail": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *       },
         *       "image": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *       },
         *       "author": {
         *         "name": "Gil",
         *         "url": "https://www.guilded.gg",
         *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *       },
         *       "fields": [
         *         {
         *           "name": "hello",
         *           "value": "these are fields"
         *         },
         *         {
         *           "name": "~~help i have been crossed out~~",
         *           "value": "~~oh noes~~",
         *           "inline": true
         *         },
         *         {
         *           "name": "another inline",
         *           "value": "field",
         *           "inline": true
         *         }
         *       ]
         *     }
         *   ],
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ChatMessage: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: chat markdown
             * @description The content of the message
             */
            content?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the message was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this message, if it was created by a webhook
             */
            createdByWebhookId?: string;
            embeds?: components["schemas"]["ChatEmbed"][];
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId?: string;
            /**
             * Hidden content link preview URLs
             * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
             */
            hiddenLinkPreviewUrls?: string[];
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message
             */
            id: string;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            /**
             * Is private
             * @description If set, this message will only be seen by those mentioned or replied to
             */
            isPrivate?: boolean;
            /**
             * Is silent
             * @description If set, this message did not notify mention or reply recipients
             * @default false
             */
            isSilent: boolean;
            mentions?: components["schemas"]["Mentions"];
            /** @description Message IDs that were replied to */
            replyMessageIds?: string[];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId?: string;
            /**
             * Type
             * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
             * @enum {string}
             */
            type: "default" | "system";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the message was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "messageId": "00000000-0000-0000-0000-000000000000"
         * } */
        ChatMessageReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message
             */
            messageId: string;
        };
        /** @example {
         *   "id": 0,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
         *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto.",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "updatedAt": "2021-07-15T22:20:00.706Z",
         *   "updatedBy": "Ann6LewA"
         * } */
        Doc: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the doc
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this doc
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the doc
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this doc
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": 123456,
         *   "content": "Wow, cool document!!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "docId": 0,
         *   "createdBy": "Ann6LewA"
         * } */
        DocComment: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the doc comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this doc comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            /**
             * Doc comment ID
             * @description The ID of the doc comment
             */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the doc comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0,
         *   "docCommentId": 123456
         * } */
        DocCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            /**
             * Doc comment ID
             * @description The ID of the doc comment
             */
            docCommentId: number;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0
         * } */
        DocReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            /**
             * Doc ID
             * @description The ID of the doc
             */
            docId: number;
            emote: components["schemas"]["Emote"];
        };
        /** @example {
         *   "id": 90000000,
         *   "name": "grinning",
         *   "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         * } */
        Emote: {
            /**
             * Emote ID
             * @description The ID of the emote
             */
            id: number;
            /**
             * Name
             * @description The name of the emote
             */
            name: string;
            /**
             * Server ID
             * @description The ID of the server the emote was created on
             */
            serverId?: string;
            /**
             * Emote URL
             * Format: media-uri
             * @description The URL of the emote image
             */
            url: string;
        };
        /** @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "content": "Please introduce yourself in this topic!!!"
         * } */
        ForumTopic: {
            /**
             * Bumped at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the forum topic
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Is locked
             * @default false
             */
            isLocked: boolean;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": 1234567890,
         *   "content": "Great idea!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "forumTopicId": 2036274747,
         *   "createdBy": "Ann6LewA"
         * } */
        ForumTopicComment: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: long-form markdown
             * @description The content of the forum topic comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic comment was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /** @description The ID of the forum topic */
            forumTopicId: number;
            /** @description The ID of the forum topic comment */
            id: number;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic comment was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456,
         *   "forumTopicCommentId": 1234567890
         * } */
        ForumTopicCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic comment */
            forumTopicCommentId: number;
            /** @description The ID of the forum topic */
            forumTopicId: number;
        };
        /** @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://www.guilded.gg/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456
         * } */
        ForumTopicReaction: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic */
            forumTopicId: number;
        };
        /** @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ForumTopicSummary: {
            /**
             * Bumped at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Is locked
             * @default false
             */
            isLocked: boolean;
            /**
             * Is pinned
             * @default false
             */
            isPinned: boolean;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Title
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": "ZVzBo83p",
         *   "serverId": "wlVr3Ggl",
         *   "name": "Fans of Turnip Boy Commits Tax Evasion",
         *   "description": "Best game on steam!",
         *   "isPublic": true,
         *   "createdAt": "2021-06-15T00:04:20.696Z",
         *   "createdBy": "Ann6LewA"
         * } */
        Group: {
            /**
             * Archived at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was archived at, if relevant
             */
            archivedAt?: string;
            /**
             * Archived by
             * @description The ID of the user who archived this group
             */
            archivedBy?: string;
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the group
             */
            avatar?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this group
             */
            createdBy: string;
            /**
             * Description
             * @description The description associated with the group
             */
            description?: string;
            /** @description The emote to associate with the group */
            emoteId?: number;
            /**
             * Group ID
             * @description The ID of the group
             */
            id: string;
            /**
             * Is home
             * @description If `true`, this is the server's home group
             */
            isHome?: boolean;
            /**
             * Is public
             * @description Is this group open for anyone to join?
             * @default false
             */
            isPublic: boolean;
            /** @description The name of the group */
            name: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the group was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this group
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA",
         *     "content": "Duly noted"
         *   }
         * } */
        ListItem: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Completed at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Format: uuid
             * @description The ID of the list item
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Message
             * Format: list item markdown
             * @description The message of the list item
             */
            message: string;
            note?: {
                /**
                 * Note
                 * Format: long-form markdown
                 * @description The note of the list item
                 */
                content: string;
                /**
                 * Created at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                mentions?: components["schemas"]["Mentions"];
                /**
                 * Updated at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
            };
            /**
             * Format: uuid
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA"
         *   }
         * } */
        ListItemSummary: {
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Completed at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Format: uuid
             * @description The ID of the list item
             */
            id: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Message
             * Format: list item markdown
             * @description The message of the list item
             */
            message: string;
            note?: {
                /**
                 * Created at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                /**
                 * Updated at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
            };
            /**
             * Format: uuid
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
        };
        /**
         * @description Metadata of who or what is mentioned in content
         * @example {
         *   "users": [
         *     {
         *       "id": "Ann6LewA"
         *     }
         *   ],
         *   "channels": [
         *     {
         *       "id": "00000000-0000-0000-0000-000000000000"
         *     }
         *   ],
         *   "roles": [
         *     {
         *       "id": 591232
         *     }
         *   ],
         *   "everyone": true,
         *   "here": true
         * }
         */
        Mentions: {
            /**
             * Channels
             * @description Info on mentioned channels
             */
            channels?: {
                /**
                 * Channel ID
                 * Format: uuid
                 * @description The ID of the channel
                 */
                id: string;
            }[];
            /**
             * Everyone
             * @description If @everyone was mentioned
             */
            everyone?: boolean;
            /**
             * Here
             * @description If @here was mentioned
             */
            here?: boolean;
            /**
             * Roles
             * @description Info on mentioned roles
             */
            roles?: {
                /**
                 * Role ID
                 * @description The ID of the role
                 */
                id: number;
            }[];
            /**
             * Users
             * @description Info on mentioned users
             */
            users?: {
                /**
                 * User ID
                 * Format: user-id
                 * @description The ID of the user
                 */
                id: string;
            }[];
        };
        /** @example {
         *   "id": 591232,
         *   "serverId": "wlVr3Ggl",
         *   "createdAt": "2023-04-15T20:15:00.706Z",
         *   "updatedAt": "2023-04-16T20:15:00.706Z",
         *   "name": "Captain",
         *   "isSelfAssignable": true,
         *   "permissions": [
         *     "CanUpdateServer",
         *     "CanReadChats",
         *     "CanCreateChats"
         *   ],
         *   "colors": [
         *     6118369
         *   ]
         * } */
        Role: {
            /**
             * Bot user ID
             * Format: user-id
             * @description The bot user ID this role has been defined for. Roles with this populated can only be deleted by kicking the bot
             */
            botUserId?: string;
            /** @description An array of integer values corresponding to the decimal RGB representation for a color. The first color is solid, and a second color indicates a gradient */
            colors?: number[];
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the role was created at
             */
            createdAt: string;
            /**
             * Role icon URL
             * Format: media-uri
             * @description The URL of the role icon
             */
            icon?: string;
            /**
             * Role ID
             * @description The ID of the role
             */
            id: number;
            /**
             * Is Base
             * @description The default role users are given when joining the server. Base roles are tied directly to the server and cannot be created or deleted
             * @default false
             */
            isBase: boolean;
            /**
             * Display Separately
             * @description If set, the role will be displayed separately in the channel member list
             * @default false
             */
            isDisplayedSeparately: boolean;
            /**
             * Mentionable
             * @description If set, this role can be mentioned
             * @default false
             */
            isMentionable: boolean;
            /**
             * Self Assignable
             * @description If set, this roll will be self assigned
             * @default false
             */
            isSelfAssignable: boolean;
            /**
             * Role name
             * @description The role's name
             */
            name: string;
            /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
            permissions: string[];
            /**
             * Priority
             * @description The priority the role will be in relation to other roles in the server. The higher the value, the more precedence the role has over lower priority roles, and the higher up it will be displayed in the UI. Values can be zero or negative!
             */
            priority?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the role was updated at, if relevant
             */
            updatedAt?: string;
        };
        /** @example {
         *   "id": "wlVr3Ggl",
         *   "type": "community",
         *   "name": "Guilded",
         *   "url": "Guilded-Official",
         *   "about": "The Official Guilded Server! For devs, friends, and fans alike!",
         *   "ownerId": "Ann6LewA",
         *   "createdAt": "2018-10-05T20:15:00.706Z",
         *   "isVerified": true,
         *   "timezone": "America/Los Angeles (PST/PDT)"
         * } */
        Server: {
            /**
             * Description
             * @description The description associated with the server
             */
            about?: string;
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the server
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             * @description The banner image associated with the server
             */
            banner?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server was created at
             */
            createdAt: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The channel ID of the default channel of the server. This channel is defined as the first chat or voice channel in the left sidebar of a server in our UI. This channel is useful for sending welcome messages, though note that a bot may not have permissions to interact with this channel depending on how the server is configured.
             */
            defaultChannelId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            id: string;
            /**
             * Is verified
             * @description The verified status of the server
             */
            isVerified?: boolean;
            /**
             * Server name
             * @description The name given to the server
             */
            name: string;
            /**
             * Created by
             * @description The ID of the user who created this server
             */
            ownerId: string;
            /**
             * Timezone
             * @description The timezone associated with the server
             */
            timezone?: string;
            /**
             * Server type
             * @description The type of server designated from the server's settings page
             * @enum {string}
             */
            type?: "team" | "organization" | "community" | "clan" | "guild" | "friends" | "streaming" | "other";
            /**
             * Server URL
             * @description The URL that the server can be accessible from. For example, a value of "Guilded-Official" means the server can be accessible from https://www.guilded.gg/Guilded-Official
             */
            url?: string;
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "chat",
         *   "name": "The Dank Cellar",
         *   "topic": "Dank memes ONLY",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p"
         * } */
        ServerChannel: {
            /**
             * Archived at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was archived at, if relevant
             */
            archivedAt?: string;
            /**
             * Archived by
             * @description The ID of the user who archived this channel
             */
            archivedBy?: string;
            /** @description The category that the channel exists in. Only relevant for server channels */
            categoryId?: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this channel
             */
            createdBy: string;
            /**
             * Group ID
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            id: string;
            /**
             * Message ID
             * Format: uuid
             * @description The ID of the message that this channel was created off of. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            messageId?: string;
            /** @description The name of the channel */
            name: string;
            /**
             * Channel ID
             * Format: uuid
             * @description ID of the **immediate** parent channel or thread in the channel hierarchy. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            parentId?: string;
            /**
             * Priority
             * @description The priority of the channel will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in ascending order. Due to legacy issues, sending a null value is not possible
             */
            priority?: number;
            /**
             * Channel ID
             * Format: uuid
             * @description ID of the **root** channel or thread in the channel hierarchy. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
             */
            rootId?: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /** @description The topic of the channel. Not applicable to threads */
            topic?: string;
            /**
             * @description The type of channel. This will determine what routes to use for creating content in a channel. For example, if this "chat", then one must use the routes for creating channel messages
             * @enum {string}
             */
            type: "announcements" | "chat" | "calendar" | "forums" | "media" | "docs" | "voice" | "list" | "scheduling" | "stream";
            /**
             * Updated at
             * Format: date-time
             * @description The ISO 8601 timestamp that the channel was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * @description What users can access the channel. Only applicable to server channels. If not present, this channel will respect normal permissions. `public` is accessible to everyone, even those who aren't of the server. `private` is only accessible to explicitly mentioned users. Currently, threads cannot be `public` and other channels cannot be `private`. Additionally, `private` threads can only exist with an associated `messageId` that is for a private message
             * @enum {string|null}
             */
            visibility?: null | "private" | "public";
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch",
         *     "createdAt": "2021-06-15T20:15:00.706Z"
         *   },
         *   "roleIds": [],
         *   "nickname": "Professor Chaos",
         *   "joinedAt": "2021-07-15T20:15:00.706Z"
         * } */
        ServerMember: {
            /**
             * Is owner
             * @default false
             */
            isOwner: boolean;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the member was created at
             */
            joinedAt: string;
            /** Nickname */
            nickname?: string;
            /** Role IDs */
            roleIds: number[];
            user: components["schemas"]["User"];
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "reason": "More toxic than a poison PokÃ©mon",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        ServerMemberBan: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server member ban was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this server member ban
             */
            createdBy: string;
            /**
             * Reason
             * @description The reason for the ban as submitted by the banner
             */
            reason?: string;
            user: components["schemas"]["UserSummary"];
        };
        /** @example {
         *   "permissions": [
         *     "CanUpdateServer",
         *     "CanReadChats",
         *     "CanCreateChats"
         *   ]
         * } */
        ServerMemberPermissions: {
            /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
            permissions: string[];
        };
        /** @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "roleIds": []
         * } */
        ServerMemberSummary: {
            /** Role IDs */
            roleIds: number[];
            user: components["schemas"]["UserSummary"];
        };
        /** @example {
         *   "type": "Gold",
         *   "serverId": "wlVr3Ggl",
         *   "roleId": 591232,
         *   "description": "Once you subscribe, this tier's benefits are free for the rest of the month!",
         *   "cost": 500,
         *   "createdAt": "2021-06-15T20:15:00.706Z"
         * } */
        ServerSubscriptionTier: {
            /** @description The cost of the tier in cents USD per month */
            cost: number;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the server subscription tier was created at
             */
            createdAt: string;
            /**
             * Description
             * @description The description associated with the server subscription tier
             */
            description?: string;
            /**
             * Role ID
             * @description The ID of the role
             */
            roleId?: number;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Server subscription tier type
             * @description The type of the server subscription tier. This field is case sensitive!!
             * @enum {string}
             */
            type: "Gold" | "Silver" | "Copper";
        };
        /** @example {
         *   "type": "roblox",
         *   "userId": "Ann6LewA",
         *   "handle": "builderman",
         *   "serviceId": "156",
         *   "createdAt": "2006-03-08T20:15:00.706Z"
         * } */
        SocialLink: {
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the social link was created at
             */
            createdAt: string;
            /** @description The handle of the user within the external service */
            handle?: string;
            /** @description The unique ID that represents this member's social link within the external service */
            serviceId?: string;
            /**
             * Social link type
             * @description The type of social link that Guilded supports. Depending on this value, `handle` or `serviceId` may or may not be present
             * @enum {string}
             */
            type: "twitch" | "bnet" | "psn" | "xbox" | "steam" | "origin" | "youtube" | "twitter" | "facebook" | "switch" | "patreon" | "roblox" | "epic";
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user that the social link is associated with
             */
            userId: string;
        };
        /** @example {
         *   "url": "https://cdn.gldcdn.com/TeamAvatar/f3ca3496e7f2b6bfaeddfbb6526bdec7-Large.png?w=450&h=450"
         * } */
        UrlSignature: {
            /** @description The number of seconds to wait before retrying the request */
            retryAfter?: number;
            /** @description The url with a valid signature that has a 5 minute expiration on the signature */
            signature?: string;
            /** @description The URL that is to be signed */
            url: string;
        };
        /** @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch",
         *   "createdAt": "2021-06-15T20:15:00.706Z"
         * } */
        User: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the user
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             * @description The banner image associated with the user
             */
            banner?: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the user was created at
             */
            createdAt: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            id: string;
            /**
             * User name
             * @description The user's name
             */
            name: string;
            status?: components["schemas"]["UserStatus"];
            /**
             * User type
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
        };
        /** @example {
         *   "content": "Ready for the weekend!",
         *   "emoteId": 90000000
         * } */
        UserStatus: {
            /**
             * Content
             * Format: status markdown
             * @description The content of the user status. The supported markdown for this content only includes reactions and plaintext for now
             */
            content?: string;
            /** @description Emote ID */
            emoteId: number;
        };
        /** @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch"
         * } */
        UserSummary: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the user
             */
            avatar?: string;
            /**
             * User ID
             * Format: user-id
             * @description The ID of the user
             */
            id: string;
            /**
             * User name
             * @description The user's name
             */
            name: string;
            /**
             * User type
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
        };
        /** @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "E-102 Gamma",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * } */
        Webhook: {
            /**
             * Avatar
             * Format: media-uri
             * @description The avatar image associated with the webhook
             */
            avatar?: string;
            /**
             * Channel ID
             * Format: uuid
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             * @description The ISO 8601 timestamp that the webhook was created at
             */
            createdAt: string;
            /**
             * Created by
             * @description The ID of the user who created this webhook
             */
            createdBy: string;
            /**
             * Deleted at
             * Format: date-time
             * @description The ISO 8601 timestamp that the webhook was deleted at
             */
            deletedAt?: string;
            /**
             * Webhook ID
             * Format: uuid
             * @description The ID of the webhook
             */
            id: string;
            /**
             * Name
             * @description The name of the webhook
             */
            name: string;
            /**
             * Server ID
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Token
             * @description The token of the webhook
             */
            token?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type Announcement = components['schemas']['Announcement'];
export type AnnouncementComment = components['schemas']['AnnouncementComment'];
export type AnnouncementCommentReaction = components['schemas']['AnnouncementCommentReaction'];
export type AnnouncementReaction = components['schemas']['AnnouncementReaction'];
export type CalendarEvent = components['schemas']['CalendarEvent'];
export type CalendarEventComment = components['schemas']['CalendarEventComment'];
export type CalendarEventCommentReaction = components['schemas']['CalendarEventCommentReaction'];
export type CalendarEventReaction = components['schemas']['CalendarEventReaction'];
export type CalendarEventRsvp = components['schemas']['CalendarEventRsvp'];
export type CalendarEventSeries = components['schemas']['CalendarEventSeries'];
export type Category = components['schemas']['Category'];
export type ChannelCategoryRolePermission = components['schemas']['ChannelCategoryRolePermission'];
export type ChannelCategoryUserPermission = components['schemas']['ChannelCategoryUserPermission'];
export type ChannelRolePermission = components['schemas']['ChannelRolePermission'];
export type ChannelUserPermission = components['schemas']['ChannelUserPermission'];
export type ChatEmbed = components['schemas']['ChatEmbed'];
export type ChatMessage = components['schemas']['ChatMessage'];
export type ChatMessageReaction = components['schemas']['ChatMessageReaction'];
export type Doc = components['schemas']['Doc'];
export type DocComment = components['schemas']['DocComment'];
export type DocCommentReaction = components['schemas']['DocCommentReaction'];
export type DocReaction = components['schemas']['DocReaction'];
export type Emote = components['schemas']['Emote'];
export type ForumTopic = components['schemas']['ForumTopic'];
export type ForumTopicComment = components['schemas']['ForumTopicComment'];
export type ForumTopicCommentReaction = components['schemas']['ForumTopicCommentReaction'];
export type ForumTopicReaction = components['schemas']['ForumTopicReaction'];
export type ForumTopicSummary = components['schemas']['ForumTopicSummary'];
export type Group = components['schemas']['Group'];
export type ListItem = components['schemas']['ListItem'];
export type ListItemSummary = components['schemas']['ListItemSummary'];
export type Mentions = components['schemas']['Mentions'];
export type Role = components['schemas']['Role'];
export type Server = components['schemas']['Server'];
export type ServerChannel = components['schemas']['ServerChannel'];
export type ServerMember = components['schemas']['ServerMember'];
export type ServerMemberBan = components['schemas']['ServerMemberBan'];
export type ServerMemberPermissions = components['schemas']['ServerMemberPermissions'];
export type ServerMemberSummary = components['schemas']['ServerMemberSummary'];
export type ServerSubscriptionTier = components['schemas']['ServerSubscriptionTier'];
export type SocialLink = components['schemas']['SocialLink'];
export type UrlSignature = components['schemas']['UrlSignature'];
export type User = components['schemas']['User'];
export type UserStatus = components['schemas']['UserStatus'];
export type UserSummary = components['schemas']['UserSummary'];
export type Webhook = components['schemas']['Webhook'];
export type $defs = Record<string, never>;
export interface operations {
    ChannelCreate: {

        requestBody: {
            content: {
                /** @example {
                 *   "name": "The Dank Cellar",
                 *   "type": "chat"
                 * } */
                "application/json": ({
                    /** @description The category that the channel exists in. Only relevant for server channels. If not provided, channel will be a top-level channel. Optional if providing a `parentId` or `messageId` */
                    categoryId?: number;
                    /**
                     * Group ID
                     * @description The ID of the group. If not provided, channel will be created in the "Server home" group from `serverId` _or_ in the group that corresponds to the `categoryId` parameter. Optional if providing a `groupId`, `categoryId`, `parentId` or `messageId`
                     */
                    groupId?: string;
                    /**
                     * Message ID
                     * Format: uuid
                     * @description The ID of the message that this channel was created off of. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present
                     */
                    messageId?: string;
                    /** @description The name of the channel */
                    name: string;
                    /**
                     * Channel ID
                     * Format: uuid
                     * @description ID of the **immediate** parent channel or thread in the channel hierarchy. Only applicable to "chat", "voice", and "stream" channels and indicates that this channel is a thread, if present. Optional if providing a `messageId`
                     */
                    parentId?: string;
                    /**
                     * Server ID
                     * @description The ID of the server. Optional if providing a `groupId`, `categoryId`, `parentId` or `messageId`
                     */
                    serverId?: string;
                    /** @description The topic of the channel. Not applicable to threads */
                    topic?: string;
                    /**
                     * @description The type of channel. This will determine what routes to use for creating content in a channel. For example, if this "chat", then one must use the routes for creating channel messages. For threads, this **must** be "chat" for now
                     * @enum {string}
                     */
                    type: "announcements" | "chat" | "calendar" | "forums" | "media" | "docs" | "voice" | "list" | "scheduling" | "stream";
                    /**
                     * @description What users can access the channel. Only applicable to server channels. If not present, this channel will respect normal permissions. `public` is accessible to everyone, even those who aren't of the server. `private` is only accessible to explicitly mentioned users. Currently, threads cannot be `public` and other channels cannot be `private`. Additionally, `private` threads can only exist with an associated `messageId` that is for a private message
                     * @enum {string|null}
                     */
                    visibility?: null | "private" | "public";
                });
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    ChannelRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    ChannelDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "The Even Danker Cellar",
                 *   "topic": "Only the dankest of memes please",
                 *   "visibility": "public",
                 *   "priority": 5
                 * } */
                "application/json": {
                    /** @description The name of the channel or thread */
                    name?: string;
                    /**
                     * Priority
                     * @description The priority of the channel will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in ascending order. Due to legacy issues, sending a null value is not possible
                     */
                    priority?: number;
                    /** @description The topic of the channel. Not applicable to threads */
                    topic?: string | null;
                    /**
                     * @description What users can access the channel. Only applicable to server channels. If not present, this channel will respect normal permissions. `public` is accessible to everyone, even those who aren't of the server. `private` is only accessible to explicitly mentioned users. Currently, threads cannot be `public` and other channels cannot be `private`. Additionally, `private` threads can only exist with an associated `messageId` that is for a private message. At this time, you cannot update the visibility on a channel to `private`; this must be set at creation
                     * @enum {string|null}
                     */
                    visibility?: null | "public";
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    AnnouncementReadMany: {
        parameters: {
            query?: {
                /** @example 2021-06-15T20:15:00.706Z */
                before?: string;
                /** @example 25 */
                limit?: number;
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcements: components["schemas"]["Announcement"][];
                    };
                };
            };
        };
    };
    AnnouncementCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "Pizza Party, don't be tardy!",
                 *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the announcement
                     */
                    content: Record<string, unknown> | string;
                    /**
                     * Title
                     * @description The title of the announcement
                     */
                    title: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    AnnouncementRead: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    AnnouncementDelete: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    AnnouncementUpdate: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "Pizza Party, don't be tardy!",
                 *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the announcement
                     */
                    content?: Record<string, unknown> | string;
                    /**
                     * Title
                     * @description The title of the announcement
                     */
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    AnnouncementCommentReadMany: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcementComments: components["schemas"]["AnnouncementComment"][];
                    };
                };
            };
        };
    };
    AnnouncementCommentCreate: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Now THAT is one awesome announcement!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the announcement comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentRead: {
        parameters: {
            path: {
                /** @example 1 */
                announcementCommentId: number;
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentDelete: {
        parameters: {
            path: {
                /** @example 1 */
                announcementCommentId: number;
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    AnnouncementCommentUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                announcementCommentId: number;
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Now THAT is one awesome announcement!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the announcement comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentReactionCreate: {
        parameters: {
            path: {
                /** @example 1 */
                announcementCommentId: number;
                /** @example AAAAAAA */
                announcementId: string;
                /**
                 * @description Channel ID where the announcement comment exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /**
                 * @description Emote ID to apply
                 * @example 90000000
                 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    AnnouncementCommentReactionDelete: {
        parameters: {
            path: {
                /** @example 1 */
                announcementCommentId: number;
                /** @example AAAAAAA */
                announcementId: string;
                /**
                 * @description Channel ID where the announcement comment exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /**
                 * @description Emote ID to apply
                 * @example 90000000
                 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    AnnouncementReactionCreate: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /**
                 * @description Emote ID to apply
                 * @example 90000000
                 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    AnnouncementReactionDelete: {
        parameters: {
            path: {
                /** @example AAAAAAA */
                announcementId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /**
                 * @description Emote ID to apply
                 * @example 90000000
                 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelArchiveCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelArchiveDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocReadMany: {
        parameters: {
            query?: {
                /** @example 2021-06-15T20:15:00.706Z */
                before?: string;
                /** @example 25 */
                limit?: number;
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        docs: components["schemas"]["Doc"][];
                    };
                };
            };
        };
    };
    DocCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
                 *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto."
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the doc
                     */
                    content: Record<string, unknown> | string;
                    /**
                     * Title
                     * @description The title of the doc
                     */
                    title: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
                 *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto."
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the doc
                     */
                    content: string;
                    /**
                     * Title
                     * @description The title of the doc
                     */
                    title: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocCommentReadMany: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        docComments: components["schemas"]["DocComment"][];
                    };
                };
            };
        };
    };
    DocCommentCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Wow, cool document!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the doc comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocCommentRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docCommentId: number;
                /** @example 1 */
                docId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocCommentDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docCommentId: number;
                /** @example 1 */
                docId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocCommentUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docCommentId: number;
                /** @example 1 */
                docId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Wow, cool document!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the doc comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocCommentReactionCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docCommentId: number;
                /** @example 1 */
                docId: number;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocCommentReactionDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docCommentId: number;
                /** @example 1 */
                docId: number;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocReactionCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    DocReactionDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                docId: number;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventSeriesDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                calendarEventSeriesId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Calendar event ID
                     * @description Control the deletion of the series from the `calendarEventId` forward. If not defined, it will delete all events
                     */
                    calendarEventId?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventSeriesUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                calendarEventSeriesId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Surprise LAN party for my wife ðŸ¤«",
                 *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
                 *   "location": "My house!",
                 *   "url": "https://www.surprisepartygame.com/",
                 *   "color": 6118369,
                 *   "startsAt": "2022-06-16T00:00:00.000Z",
                 *   "duration": 60
                 * } */
                "application/json": {
                    /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
                    autofillWaitlist?: boolean;
                    /**
                     * Calendar event ID
                     * @description Control the updating of the series from the `calendarEventId` forward. If not defined, it will edit all events
                     */
                    calendarEventId?: number;
                    /** @description The integer value corresponds to the decimal RGB representation for the color. The color of the event when viewing in the calendar */
                    color?: number;
                    /**
                     * Description
                     * Format: long-form markdown
                     * @description The description of the event
                     */
                    description?: string;
                    /**
                     * Duration
                     * @description The duration of the event _**in minutes**_
                     */
                    duration?: number;
                    /**
                     * Is all day
                     * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
                     */
                    isAllDay?: boolean;
                    /** Is private */
                    isPrivate?: boolean;
                    /**
                     * Location
                     * @description The location of the event
                     */
                    location?: string;
                    /**
                     * Name
                     * @description The name of the event
                     */
                    name?: string;
                    repeatInfo?: {
                        /**
                         * Ends at
                         * Format: date-time
                         * @description The ISO 8601 timestamp that the event ends at. Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endsAfterOccurrences`, the earliest resultant date of the two will be used)
                         */
                        endDate?: string;
                        /**
                         * Occurrences
                         * @description Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endDate`, the earliest resultant date of the two will be used)
                         */
                        endsAfterOccurrences?: number;
                        /** @description Apply further clarification to your events. This **must** have `type` set to `custom` */
                        every?: {
                            /**
                             * Count
                             * @description How often between your interval the event should repeat. For example, 1 would be every interval, 2 would be every second occurrence of the interval
                             */
                            count: number;
                            /**
                             * Interval
                             * @description Coupled with `count`, this indicates the time range you are repeating your event over
                             * @enum {string}
                             */
                            interval: "day" | "month" | "year" | "week";
                        };
                        /** @description Used to control the day of the week that the event should repeat on (only used when `type` is `custom` and when `every.interval` is `week`) */
                        on?: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")[];
                        /**
                         * Repeat Type
                         * @description How often you want your event to repeat (important note: this will repeat for the next 365 days unless custom is defined)
                         * @default once
                         * @enum {string}
                         */
                        type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
                    };
                    /**
                     * Role IDs
                     * @description The role IDs to restrict the event to. Passing an empty array will clear the role IDs on the event
                     */
                    roleIds?: number[];
                    /**
                     * RSVP disabled
                     * @description When disabled, users will not be able to RSVP to the event
                     */
                    rsvpDisabled?: boolean;
                    /** @description The number of RSVPs to allow before waitlisting RSVPs */
                    rsvpLimit?: number;
                    /**
                     * Starts at
                     * Format: date-time
                     * @description The ISO 8601 timestamp that the event starts at
                     */
                    startsAt?: string;
                    /**
                     * Format: uri
                     * @description A URL to associate with the event
                     */
                    url?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventReadMany: {
        parameters: {
            query?: {
                /** @example 2021-06-15T20:15:00.706Z */
                after?: string;
                /** @example 2021-06-15T20:15:00.706Z */
                before?: string;
                /** @example 25 */
                limit?: number;
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEvents: components["schemas"]["CalendarEvent"][];
                    };
                };
            };
        };
    };
    CalendarEventCreate: {
        parameters: {
            path: {
                /**
                 * @description The calendar to create the event in
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Surprise LAN party for my wife ðŸ¤«",
                 *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
                 *   "location": "My house!",
                 *   "url": "https://www.surprisepartygame.com/",
                 *   "color": 6118369,
                 *   "startsAt": "2022-06-16T00:00:00.000Z",
                 *   "duration": 60
                 * } */
                "application/json": {
                    /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
                    autofillWaitlist?: boolean;
                    /** @description The integer value corresponds to the decimal RGB representation for the color. The color of the event when viewing in the calendar */
                    color?: number;
                    /**
                     * Description
                     * Format: long-form markdown
                     * @description The description of the event
                     */
                    description?: string;
                    /**
                     * Duration
                     * @description The duration of the event _**in minutes**_
                     */
                    duration?: number;
                    /**
                     * Is all day
                     * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
                     */
                    isAllDay?: boolean;
                    /** Is private */
                    isPrivate?: boolean;
                    /**
                     * Location
                     * @description The location of the event
                     */
                    location?: string;
                    /**
                     * Name
                     * @description The name of the event
                     */
                    name: string;
                    repeatInfo?: {
                        /**
                         * Ends at
                         * Format: date-time
                         * @description The ISO 8601 timestamp that the event ends at. Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endsAfterOccurrences`, the earliest resultant date of the two will be used)
                         */
                        endDate?: string;
                        /**
                         * Occurrences
                         * @description Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endDate`, the earliest resultant date of the two will be used)
                         */
                        endsAfterOccurrences?: number;
                        /** @description Apply further clarification to your events. This **must** have `type` set to `custom` */
                        every?: {
                            /**
                             * Count
                             * @description How often between your interval the event should repeat. For example, 1 would be every interval, 2 would be every second occurrence of the interval
                             */
                            count: number;
                            /**
                             * Interval
                             * @description Coupled with `count`, this indicates the time range you are repeating your event over
                             * @enum {string}
                             */
                            interval: "day" | "month" | "year" | "week";
                        };
                        /** @description Used to control the day of the week that the event should repeat on (only used when `type` is `custom` and when `every.interval` is `week`) */
                        on?: ("sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday")[];
                        /**
                         * Repeat Type
                         * @description How often you want your event to repeat (important note: this will repeat for the next 365 days unless custom is defined)
                         * @default once
                         * @enum {string}
                         */
                        type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
                    };
                    /**
                     * Role IDs
                     * @description The role IDs to restrict the event to
                     */
                    roleIds?: number[];
                    /**
                     * RSVP disabled
                     * @description When disabled, users will not be able to RSVP to the event
                     */
                    rsvpDisabled?: boolean;
                    /** @description The number of RSVPs to allow before waitlisting RSVPs */
                    rsvpLimit?: number;
                    /**
                     * Starts at
                     * Format: date-time
                     * @description The ISO 8601 timestamp that the event starts at
                     */
                    startsAt?: string;
                    /**
                     * Format: uri
                     * @description A URL to associate with the event
                     */
                    url?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventRead: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventDelete: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Surprise LAN party for my wife ðŸ¤«",
                 *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
                 *   "location": "My house!",
                 *   "url": "https://www.surprisepartygame.com/",
                 *   "color": 6118369,
                 *   "startsAt": "2022-06-16T00:00:00.000Z",
                 *   "duration": 60
                 * } */
                "application/json": {
                    /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
                    autofillWaitlist?: boolean;
                    cancellation?: {
                        /**
                         * Description
                         * Format: long-form markdown
                         * @description The description of event cancellation
                         */
                        description?: string;
                    };
                    /** @description The integer value corresponds to the decimal RGB representation for the color. The color of the event when viewing in the calendar */
                    color?: number;
                    /**
                     * Description
                     * Format: long-form markdown
                     * @description The description of the event
                     */
                    description?: string;
                    /**
                     * Duration
                     * @description The duration of the event _**in minutes**_
                     */
                    duration?: number;
                    /**
                     * Is all day
                     * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
                     */
                    isAllDay?: boolean;
                    /** Is private */
                    isPrivate?: boolean;
                    /**
                     * Location
                     * @description The location of the event
                     */
                    location?: string;
                    /**
                     * Name
                     * @description The name of the event
                     */
                    name?: string;
                    /**
                     * Role IDs
                     * @description The role IDs to restrict the event to. Passing an empty array will clear the role IDs on the event
                     */
                    roleIds?: number[];
                    /**
                     * RSVP disabled
                     * @description When disabled, users will not be able to RSVP to the event
                     */
                    rsvpDisabled?: boolean;
                    /** @description The number of RSVPs to allow before waitlisting RSVPs */
                    rsvpLimit?: number;
                    /**
                     * Starts at
                     * Format: date-time
                     * @description The ISO 8601 timestamp that the event starts at
                     */
                    startsAt?: string;
                    /**
                     * Format: uri
                     * @description A URL to associate with the event
                     */
                    url?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventCommentReadMany: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventComments: components["schemas"]["CalendarEventComment"][];
                    };
                };
            };
        };
    };
    CalendarEventCommentCreate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "I will be there!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the calendar event comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventCommentRead: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventCommentId: number;
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventCommentDelete: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventCommentId: number;
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventCommentUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventCommentId: number;
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "I will be there!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the calendar event comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventCommentReactionCreate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventCommentId: number;
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventCommentReactionDelete: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventCommentId: number;
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventReactionCreate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventReactionDelete: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventRsvpReadMany: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventRsvps: components["schemas"]["CalendarEventRsvp"][];
                    };
                };
            };
        };
    };
    CalendarEventRsvpUpdateMany: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Status
                     * @description The status of the RSVP
                     * @enum {string}
                     */
                    status: "going" | "maybe" | "declined" | "invited";
                    /** User IDs */
                    userIds: (string | "@me")[];
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CalendarEventRsvpRead: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    };
                };
            };
        };
    };
    CalendarEventRsvpUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "status": "going"
                 * } */
                "application/json": {
                    /**
                     * Status
                     * @description The status of the RSVP
                     * @enum {string}
                     */
                    status: "going" | "maybe" | "declined" | "invited";
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    };
                };
            };
        };
    };
    CalendarEventRsvpDelete: {
        parameters: {
            path: {
                /** @example 1 */
                calendarEventId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ListItemReadMany: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        listItems: components["schemas"]["ListItemSummary"][];
                    };
                };
            };
        };
    };
    ListItemCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "message": "Create TODO list",
                 *   "note": {
                 *     "content": "I really need to stop putting this off"
                 *   }
                 * } */
                "application/json": {
                    /**
                     * Message
                     * @description The message of the list item
                     */
                    message: Record<string, unknown> | string;
                    note?: {
                        /**
                         * Note
                         * @description The note of the list item
                         */
                        content: Record<string, unknown> | string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                listItemId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                listItemId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ListItemUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                listItemId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "message": "Create TODO list",
                 *   "note": {
                 *     "content": "I really need to stop putting this off"
                 *   }
                 * } */
                "application/json": {
                    /**
                     * Message
                     * Format: list item markdown
                     * @description The message of the list item
                     */
                    message?: string;
                    note?: {
                        /**
                         * Note
                         * Format: long-form markdown
                         * @description The note of the list item
                         */
                        content: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemCompleteCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                listItemId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ListItemCompleteDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                listItemId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessageReadMany: {
        parameters: {
            query?: {
                /**
                 * @description An ISO 8601 timestamp that will be used to filter out results for the current page. Order will be reversed when compared to `before` or when omitting this parameter altogether
                 * @example 2021-06-15T20:15:00.706Z
                 */
                after?: string;
                /** @example 2021-06-15T20:15:00.706Z */
                before?: string;
                /** @description Whether to include private messages between all users in response */
                includePrivate?: boolean;
                /** @example 25 */
                limit?: number;
            };
            path: {
                /**
                 * @description ID of the channel that the messages exist in
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        messages: components["schemas"]["ChatMessage"][];
                    };
                };
            };
        };
    };
    ChannelMessageCreate: {
        parameters: {
            path: {
                /**
                 * @description Channel ID to create the message in
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Hello **world**!",
                 *   "embeds": [
                 *     {
                 *       "title": "embed title",
                 *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
                 *       "url": "https://www.guilded.gg",
                 *       "color": 6118369,
                 *       "timestamp": "2022-04-12T22:14:36.737Z",
                 *       "footer": {
                 *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
                 *         "text": "footer text"
                 *       },
                 *       "thumbnail": {
                 *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
                 *       },
                 *       "image": {
                 *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
                 *       },
                 *       "author": {
                 *         "name": "Gil",
                 *         "url": "https://www.guilded.gg",
                 *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
                 *       },
                 *       "fields": [
                 *         {
                 *           "name": "hello",
                 *           "value": "these are fields"
                 *         },
                 *         {
                 *           "name": "~~help i have been crossed out~~",
                 *           "value": "~~oh noes~~",
                 *           "inline": true
                 *         },
                 *         {
                 *           "name": "another inline",
                 *           "value": "field",
                 *           "inline": true
                 *         }
                 *       ]
                 *     }
                 *   ]
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the message
                     */
                    content?: Record<string, unknown> | string;
                    /** @description At this time, only one embed is supported per message, and attachments are not supported. If you need to send more than one embed or upload attachments, consider creating the message via a webhook. */
                    embeds?: components["schemas"]["ChatEmbed"][];
                    /**
                     * Hidden content link preview URLs
                     * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
                     */
                    hiddenLinkPreviewUrls?: string[];
                    /**
                     * Is private
                     * @description If set, this message will only be seen by those mentioned or replied to
                     */
                    isPrivate?: boolean;
                    /**
                     * Is silent
                     * @description If set, this message will not notify any mentioned users or roles
                     * @default false
                     */
                    isSilent?: boolean;
                    /** @description Message IDs to reply to */
                    replyMessageIds?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        message: components["schemas"]["ChatMessage"];
                    };
                };
            };
        };
    };
    ChannelMessageRead: {
        parameters: {
            path: {
                /**
                 * @description ID of the channel that the message exists in
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        message: components["schemas"]["ChatMessage"];
                    };
                };
            };
        };
    };
    ChannelMessageUpdate: {
        parameters: {
            path: {
                /**
                 * @description ID of the channel that the message to be updated exists in
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Hello **world**!",
                 *   "embeds": [
                 *     {
                 *       "title": "embed title",
                 *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
                 *       "url": "https://www.guilded.gg",
                 *       "color": 6118369,
                 *       "timestamp": "2022-04-12T22:14:36.737Z",
                 *       "footer": {
                 *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
                 *         "text": "footer text"
                 *       },
                 *       "thumbnail": {
                 *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
                 *       },
                 *       "image": {
                 *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
                 *       },
                 *       "author": {
                 *         "name": "Gil",
                 *         "url": "https://www.guilded.gg",
                 *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
                 *       },
                 *       "fields": [
                 *         {
                 *           "name": "hello",
                 *           "value": "these are fields"
                 *         },
                 *         {
                 *           "name": "~~help i have been crossed out~~",
                 *           "value": "~~oh noes~~",
                 *           "inline": true
                 *         },
                 *         {
                 *           "name": "another inline",
                 *           "value": "field",
                 *           "inline": true
                 *         }
                 *       ]
                 *     }
                 *   ]
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the message
                     */
                    content?: Record<string, unknown> | string;
                    /** @description At this time, only one embed is supported per message, and attachments are not supported. If you need to send more than one embed or upload attachments, consider creating the message via a webhook. */
                    embeds?: components["schemas"]["ChatEmbed"][];
                    /**
                     * Hidden content link preview URLs
                     * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
                     */
                    hiddenLinkPreviewUrls?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        message: {
                            /**
                             * Channel ID
                             * Format: uuid
                             * @description The ID of the channel
                             */
                            channelId?: string;
                            /**
                             * Content
                             * Format: chat markdown
                             * @description The content of the message
                             */
                            content?: string;
                            /**
                             * Created at
                             * Format: date-time
                             * @description The ISO 8601 timestamp that the message was created at
                             */
                            createdAt?: string;
                            /**
                             * Created by
                             * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
                             */
                            createdBy?: string;
                            /**
                             * Created by Webhook ID
                             * @description The ID of the webhook who created this message, if it was created by a webhook
                             */
                            createdByWebhookId?: string;
                            embeds?: components["schemas"]["ChatEmbed"][];
                            /**
                             * Group ID
                             * @description The ID of the group
                             */
                            groupId?: string;
                            /**
                             * Hidden content link preview URLs
                             * @description Links in `content` to prevent unfurling as a link preview when displaying in Guilded
                             */
                            hiddenLinkPreviewUrls?: string[];
                            /**
                             * Message ID
                             * Format: uuid
                             * @description The ID of the message
                             */
                            id?: string;
                            /**
                             * Is pinned
                             * @default false
                             */
                            isPinned: boolean;
                            /**
                             * Is private
                             * @description If set, this message will only be seen by those mentioned or replied to
                             */
                            isPrivate?: boolean;
                            /**
                             * Is silent
                             * @description If set, this message did not notify mention or reply recipients
                             * @default false
                             */
                            isSilent: boolean;
                            mentions?: components["schemas"]["Mentions"];
                            /** @description Message IDs that were replied to */
                            replyMessageIds?: string[];
                            /**
                             * Server ID
                             * @description The ID of the server
                             */
                            serverId?: string;
                            /**
                             * Type
                             * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
                             * @enum {string}
                             */
                            type?: "default" | "system";
                            /**
                             * Updated at
                             * Format: date-time
                             * @description The ISO 8601 timestamp that the message was updated at, if relevant
                             */
                            updatedAt: string;
                        } & WithRequired<components["schemas"]["ChatMessage"], "updatedAt">;
                    };
                };
            };
        };
    };
    ChannelMessageDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessageReactionDeleteMany: {
        parameters: {
            query?: {
                /** @example 90000000 */
                emoteId?: number;
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessageReactionCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessageReactionDelete: {
        parameters: {
            query?: {
                /** @example Ann6LewA */
                userId?: string | "@me";
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessagePinCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelMessagePinDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                messageId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicReadMany: {
        parameters: {
            query?: {
                /** @example 2021-06-15T20:15:00.706Z */
                before?: string;
                /** @example 25 */
                limit?: number;
            };
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        forumTopics: components["schemas"]["ForumTopicSummary"][];
                    };
                };
            };
        };
    };
    ForumTopicCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "Welcome new members!!",
                 *   "content": "Please introduce yourself in this topic!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * @description The content of the forum topic
                     */
                    content: Record<string, unknown> | string;
                    /**
                     * Title
                     * @description The title of the forum topic
                     */
                    title: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "title": "Welcome new members!!",
                 *   "content": "Please introduce yourself in this topic!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the forum topic
                     */
                    content?: string;
                    /**
                     * Title
                     * @description The title of the forum topic
                     */
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicCommentReadMany: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        forumTopicComments: components["schemas"]["ForumTopicComment"][];
                    };
                };
            };
        };
    };
    ForumTopicCommentCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Great idea!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the forum topic comment
                     */
                    content: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ForumTopicCommentRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicCommentId: number;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ForumTopicCommentDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicCommentId: number;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicCommentUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicCommentId: number;
                forumTopicId: number;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "content": "Please introduce yourself in this topic!!!"
                 * } */
                "application/json": {
                    /**
                     * Content
                     * Format: long-form markdown
                     * @description The content of the forum topic
                     */
                    content?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ForumTopicCommentReactionCreate: {
        parameters: {
            path: {
                /**
                 * @description Channel ID where the forum topic exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
                forumTopicCommentId: number;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicCommentReactionDelete: {
        parameters: {
            path: {
                /**
                 * @description Channel ID where the forum topic exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /** @example 90000000 */
                emoteId: number;
                forumTopicCommentId: number;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicReactionCreate: {
        parameters: {
            path: {
                /**
                 * @description Channel ID where the forum topic exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /**
                 * @description Emote ID to apply
                 * @example 90000000
                 */
                emoteId: number;
                /** @description Forum Topic ID */
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicReactionDelete: {
        parameters: {
            path: {
                /**
                 * @description Channel ID where the forum topic exists
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId: string;
                /**
                 * @description Emote ID to remove
                 * @example 90000000
                 */
                emoteId: number;
                /** @description Forum Topic ID */
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicLock: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicUnlock: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicPin: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ForumTopicUnpin: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                forumTopicId: number;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    GroupMembershipCreate: {
        parameters: {
            path: {
                /**
                 * @description Group ID to add the member to
                 * @example ZVzBo83p
                 */
                groupId: string;
                /**
                 * @description Member ID to add to the group
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    GroupMembershipDelete: {
        parameters: {
            path: {
                /**
                 * @description Group ID to remove the member from
                 * @example ZVzBo83p
                 */
                groupId: string;
                /**
                 * @description Member ID to remove from the group
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ServerRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        server: components["schemas"]["Server"];
                        /** @description Count of members in this server after this join. **Note:** at higher member counts (1000+), this value is only updated periodically and should not be used in situations that require absolute accuracy */
                        serverMemberCount: number;
                    };
                };
            };
        };
    };
    ServerMemberBanReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        serverMemberBans: components["schemas"]["ServerMemberBan"][];
                    };
                };
            };
        };
    };
    ServerMemberBanRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the user to get a server ban for
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        serverMemberBan: components["schemas"]["ServerMemberBan"];
                    };
                };
            };
        };
    };
    ServerMemberBanCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the user to ban from this server
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        requestBody?: {
            content: {
                /** @example {
                 *   "reason": "More toxic than a poison PokÃ©mon"
                 * } */
                "application/json": {
                    /**
                     * Reason
                     * @description The reason for the ban
                     */
                    reason?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        serverMemberBan: components["schemas"]["ServerMemberBan"];
                    };
                };
            };
        };
    };
    ServerMemberBanDelete: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the user to unban from this server
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    CategoryCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Social",
                 *   "groupId": "ZVzBo83p"
                 * } */
                "application/json": {
                    /**
                     * Group ID
                     * @description The ID of the group. If not provided, the category will be created in the "Server home" group from `serverId`.
                     */
                    groupId?: string;
                    /** @description Name of the category */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryRead: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryDelete: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Social Groups"
                 * } */
                "application/json": {
                    /** @description Name of the category */
                    name?: string;
                    /**
                     * Priority
                     * @description The priority of the category will determine its position relative to other categories in the group. The higher the value, the higher up it will be displayed in the UI. Returned values can be null, in which case sorting will be done by `createdAt` in descending order. Due to legacy issues, sending a null value is not possible
                     */
                    priority?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionReadMany: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryRolePermissions: components["schemas"]["ChannelCategoryRolePermission"][];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionRead: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionCreate: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionDelete: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelCategoryRolePermissionUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionReadMany: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryUserPermissions: components["schemas"]["ChannelCategoryUserPermission"][];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionRead: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionCreate: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionDelete: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelCategoryUserPermissionUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                categoryId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionReadMany: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelRolePermissions: components["schemas"]["ChannelRolePermission"][];
                    };
                };
            };
        };
    };
    ChannelRolePermissionRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelRolePermissionUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionReadMany: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelUserPermissions: components["schemas"]["ChannelUserPermission"][];
                    };
                };
            };
        };
    };
    ChannelUserPermissionRead: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionCreate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionDelete: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ChannelUserPermissionUpdate: {
        parameters: {
            path: {
                /** @example 00000000-0000-0000-0000-000000000000 */
                channelId: string;
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanUpdateServer": true,
                 *     "CanReadChats": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true`, `false` or null values. Permission list can only contain relevant permissions for the channel type */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    GroupReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        groups: components["schemas"]["Group"][];
                    };
                };
            };
        };
    };
    GroupCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Fans of Turnip Boy Commits Tax Evasion",
                 *   "description": "Best game on steam!",
                 *   "isPublic": true
                 * } */
                "application/json": {
                    /**
                     * Description
                     * @description The description associated with the group
                     */
                    description?: string;
                    /** @description The emote to associate with the group */
                    emoteId?: number;
                    /**
                     * Is public
                     * @description Is this group open for anyone to join?
                     * @default false
                     */
                    isPublic?: boolean;
                    /** @description The name of the group */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    GroupRead: {
        parameters: {
            path: {
                /** @example ZVzBo83p */
                groupId: string;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    GroupDelete: {
        parameters: {
            path: {
                /** @example ZVzBo83p */
                groupId: string;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    GroupUpdate: {
        parameters: {
            path: {
                /** @example ZVzBo83p */
                groupId: string;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Ex-Fans of Turnip Boy Commits Tax Evasion"
                 * } */
                "application/json": {
                    /**
                     * Description
                     * @description The description associated with the group
                     * **Note** - this property cannot be modified on a home group
                     */
                    description?: string;
                    /** @description The emote to associate with the group */
                    emoteId?: number;
                    /**
                     * Is public
                     * @description Is this group open for anyone to join?
                     * **Note** - this property cannot be modified on a home group
                     */
                    isPublic?: boolean;
                    /** @description The name of the group */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    ServerMemberReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        members: components["schemas"]["ServerMemberSummary"][];
                    };
                };
            };
        };
    };
    ServerMemberRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        member: components["schemas"]["ServerMember"];
                    };
                };
            };
        };
    };
    ServerMemberDelete: {
        parameters: {
            path: {
                /**
                 * @description The ID of the server to kick the user from
                 * @example wlVr3Ggl
                 */
                serverId: string;
                /**
                 * @description The ID of the user to kick. If the value provided here is your own user's ID, the request will attempt to make you leave the server
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    MemberNicknameUpdate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the user to update nickname for
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "nickname": "Professor Chaos"
                 * } */
                "application/json": {
                    /**
                     * Nickname
                     * @description The nickname to assign to the member
                     */
                    nickname: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /**
                         * Nickname
                         * @description The nickname that was assigned to the member
                         */
                        nickname: string;
                    };
                };
            };
        };
    };
    MemberNicknameDelete: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the user to remove nickname from
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ServerMemberPermissionsRead: {
        parameters: {
            query?: {
                categoryId?: number;
                channelId?: string;
                /** @description A queryString array of `ids[]` representing [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) */
                ids?: ("CanCreateTopics" | "CanCreateTopicReplies" | "CanDeleteTopics" | "CanStickyTopics" | "CanLockTopics" | "CanManageEmotes" | "CanViewFormResponses" | "CanUpdateListItems" | "CanManageServerXp" | "CanCreateThreads" | "CanCreateThreadMessages" | "CanManageThreads" | "CanCreateAnnouncements" | "CanUpdateServer" | "CanManageRoles" | "CanInviteMembers" | "CanKickMembers" | "CanManageGroups" | "CanManageChannels" | "CanManageWebhooks" | "CanMentionEveryone" | "CanModerateChannels" | "CanBypassSlowMode" | "CanReadApplications" | "CanApproveApplications" | "CanEditApplicationForm" | "CanIndicateLfmInterest" | "CanModifyLfmStatus" | "CanReadAnnouncements" | "CanManageAnnouncements" | "CanReadChats" | "CanCreateChats" | "CanUploadChatMedia" | "CanCreatePrivateMessages" | "CanManageChats" | "CanReadEvents" | "CanCreateEvents" | "CanEditEvents" | "CanDeleteEvents" | "CanEditEventRsvps" | "CanReadForums" | "CanReadDocs" | "CanCreateDocs" | "CanEditDocs" | "CanDeleteDocs" | "CanReadMedia" | "CanAddMedia" | "CanEditMedia" | "CanDeleteMedia" | "CanListenVoice" | "CanAddVoice" | "CanManageVoiceGroups" | "CanAssignVoiceGroup" | "CanBroadcastVoice" | "CanDirectVoice" | "CanPrioritizeVoice" | "CanUseVoiceActivity" | "CanMuteMembers" | "CanDeafenMembers" | "CanSendVoiceMessages" | "CanCreateScrims" | "CanManageTournaments" | "CanRegisterForTournaments" | "CanChangeNickname" | "CanManageNicknames" | "CanViewPollResponses" | "CanReadListItems" | "CanCreateListItems" | "CanDeleteListItems" | "CanCompleteListItems" | "CanReorderListItems" | "CanViewBracket" | "CanReportScores" | "CanReadSchedules" | "CanCreateSchedule" | "CanDeleteSchedule" | "CanManageBots" | "CanReadStreams" | "CanJoinStreamVoice" | "CanCreateStreams" | "CanSendStreamMessages" | "CanAddStreamVoice" | "CanUseVoiceActivityInStream" | "CanReceiveAllSocketEvents")[];
            };
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description A list of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) the User has in the success case */
                        permissions: string[];
                    };
                };
            };
        };
    };
    RoleMembershipReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the member to obtain roles from
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /**
                         * Role IDs
                         * @description The IDs of the roles that the member currently has
                         */
                        roleIds: number[];
                    };
                };
            };
        };
    };
    RoleMembershipCreate: {
        parameters: {
            path: {
                /**
                 * @description The role ID to apply to the user
                 * @example 1
                 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the member that the role should be assigned to
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    RoleMembershipDelete: {
        parameters: {
            path: {
                /**
                 * @description The role ID to remove from the user
                 * @example 1
                 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description The ID of the member that the role should be removed from
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    MemberSocialLinkRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @description The type of social link to retrieve */
                socialLinkType: "twitch" | "bnet" | "psn" | "xbox" | "steam" | "origin" | "youtube" | "twitter" | "facebook" | "switch" | "patreon" | "roblox" | "epic";
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        socialLink: components["schemas"]["SocialLink"];
                    };
                };
            };
        };
    };
    ServerXpForUserUpdate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description Member ID to set XP to
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "total": 42
                 * } */
                "application/json": {
                    /** @description The total XP to set on the user */
                    total: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description The total XP after this operation */
                        total: number;
                    };
                };
            };
        };
    };
    ServerXpForUserCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /**
                 * @description Member ID to award XP to
                 * @example Ann6LewA
                 */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "amount": 42
                 * } */
                "application/json": {
                    /**
                     * Amount
                     * @description The amount of XP to award
                     */
                    amount: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description The total XP after this operation */
                        total: number;
                    };
                };
            };
        };
    };
    RoleReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        roles: components["schemas"]["Role"][];
                    };
                };
            };
        };
    };
    RoleCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Members of Guilded",
                 *   "permissions": [
                 *     "CanManageChats"
                 *   ],
                 *   "colors": [
                 *     22051,
                 *     0
                 *   ],
                 *   "isMentionable": true
                 * } */
                "application/json": {
                    /** @description An array of integer values corresponding to the decimal RGB representation for a color. The first color is solid, and a second color indicates a gradient */
                    colors?: number[];
                    /**
                     * Display Separately
                     * @description If set, the role will be displayed separately in the channel member list
                     * @default false
                     */
                    isDisplayedSeparately?: boolean;
                    /**
                     * Mentionable
                     * @description If set, this role can be mentioned
                     * @default false
                     */
                    isMentionable?: boolean;
                    /**
                     * Self Assignable
                     * @description If set, this roll will be self assigned
                     * @default false
                     */
                    isSelfAssignable?: boolean;
                    /**
                     * Role name
                     * @description The role's name
                     */
                    name: string;
                    /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
                    permissions: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleRead: {
        parameters: {
            path: {
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleDelete: {
        parameters: {
            path: {
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "colors": [
                 *     22051
                 *   ]
                 * } */
                "application/json": {
                    /** @description An array of integer values corresponding to the decimal RGB representation for a color. The first color is solid, and a second color indicates a gradient */
                    colors?: number[];
                    /**
                     * Display Separately
                     * @description If set, the role will be displayed separately in the channel member list
                     */
                    isDisplayedSeparately?: boolean;
                    /**
                     * Mentionable
                     * @description If set, this role can be mentioned
                     */
                    isMentionable?: boolean;
                    /**
                     * Self Assignable
                     * @description If set, this roll will be self assigned
                     */
                    isSelfAssignable?: boolean;
                    /**
                     * Role name
                     * @description The role's name
                     */
                    name?: string;
                    /** @description Permissions must be a collection of valid permissions as defined in the [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) section */
                    permissions?: string[];
                    /**
                     * Priority
                     * @description The priority the role will be in relation to other roles in the server. The higher the value, the more precedence the role has over lower priority roles, and the higher up it will be displayed in the UI. Values can be zero or negative!
                     */
                    priority?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RolePermissionUpdate: {
        parameters: {
            path: {
                /** @example 1 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "permissions": {
                 *     "CanCreateEvents": false,
                 *     "CanReadEvents": true
                 *   }
                 * } */
                "application/json": {
                    /** @description A JSON object of [Enums/Permissions](https://www.guilded.gg/docs/api/Permissions) with `true` or `false` values. */
                    permissions: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    ServerXpForRoleCreate: {
        parameters: {
            path: {
                /**
                 * @description Role ID to award XP to
                 * @example 1
                 */
                roleId: number;
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "amount": 42
                 * } */
                "application/json": {
                    /**
                     * Amount
                     * @description The amount of XP to award
                     */
                    amount: number;
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ServerSubscriptionTierReadMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        serverSubscriptionTiers: components["schemas"]["ServerSubscriptionTier"][];
                    };
                };
            };
        };
    };
    ServerSubscriptionTierRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example Gold */
                serverSubscriptionTierType: "Gold" | "Silver" | "Copper";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        serverSubscriptionTier: components["schemas"]["ServerSubscriptionTier"];
                    };
                };
            };
        };
    };
    WebhookReadMany: {
        parameters: {
            query?: {
                /**
                 * @description ID of the channel you want to filter for webhooks
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                channelId?: string;
            };
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        webhooks: components["schemas"]["Webhook"][];
                    };
                };
            };
        };
    };
    WebhookCreate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Game patch webhook"
                 * } */
                "application/json": {
                    /**
                     * Channel ID
                     * Format: uuid
                     * @description Channel ID to create the webhook in
                     */
                    channelId: string;
                    /**
                     * Name
                     * @description The name of the webhook
                     */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
 
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookRead: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                webhookId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookUpdate: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                webhookId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "name": "Better name webhook"
                 * } */
                "application/json": {
                    /**
                     * Channel ID
                     * Format: uuid
                     * @description The ID of the channel
                     */
                    channelId?: string;
                    /**
                     * Name
                     * @description The name of the webhook
                     */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookDelete: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
                /** @example 00000000-0000-0000-0000-000000000000 */
                webhookId: string;
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    ServerXpForUserUpdateMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "amount": 7777,
                 *   "userIds": [
                 *     "Ann6LewA"
                 *   ]
                 * } */
                "application/json": {
                    /** @description The total XP to set on each user */
                    amount: number;
                    /** User IDs */
                    userIds: (string | "@me")[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description Each key of the object will be a user ID, and its value will be the total for that user after this operation */
                        totalsByUserId: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    ServerXpForUserCreateMany: {
        parameters: {
            path: {
                /** @example wlVr3Ggl */
                serverId: string;
            };
        };
        requestBody: {
            content: {
                /** @example {
                 *   "amount": 42,
                 *   "userIds": [
                 *     "Ann6LewA"
                 *   ]
                 * } */
                "application/json": {
                    /**
                     * Amount
                     * @description The amount of XP to award
                     */
                    amount: number;
                    /** User IDs */
                    userIds: (string | "@me")[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description Each key of the object will be a user ID, and its value will be the total for that user after this operation */
                        totalsByUserId: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    UrlSignatureCreateMany: {

        requestBody: {
            content: {
                "application/json": {
                    /** @description An array of guilded CDN based URLs to get a signature on. Each URL is valid for 5 minutes and limited to one request per day */
                    urls: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        /** @description An array of URLs with a valid signature that has a 5 minute expiration. Any item with a `retryAfter` indicates you are still within the rate limit for that particular `url` */
                        urlSignatures: components["schemas"]["UrlSignature"][];
                    };
                };
            };
        };
    };
    UserRead: {
        parameters: {
            path: {
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        user: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    UserServerReadMany: {
        parameters: {
            path: {
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            200: {
 
                content: {
                    "application/json": {
                        servers: components["schemas"]["Server"][];
                    };
                };
            };
        };
    };
    UserStatusCreate: {
        parameters: {
            path: {
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Content
                     * Format: status markdown
                     * @description The content of the user status. The supported markdown for this content only includes reactions and plaintext for now
                     */
                    content?: string;
                    /** @description Emote ID to apply */
                    emoteId: number;
                    /**
                     * Expires at
                     * Format: date-time
                     * @description An ISO 8601 timestamp that will be used to indicate when an expiration occurs. Expiration usually will not occur exactly at this time. Bot logic should not expect a guarantee of timing as a result, but can expect that it'll happen very shortly afterwards
                     */
                    expiresAt?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
    UserStatusDelete: {
        parameters: {
            path: {
                /** @example Ann6LewA */
                userId: string | "@me";
            };
        };
        responses: {
            /** @description Success */
            204: {
 
                content: never;
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
